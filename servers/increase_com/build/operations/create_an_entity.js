import { z } from "zod";
export const toolName = `create_an_entity`;
export const toolDescription = `Create an Entity`;
export const baseUrl = `https://api.increase.com`;
export const path = `/entities`;
export const method = `post`;
export const security = [
    {
        "key": "Authorization",
        "value": "Bearer <mcp-env-var>API_KEY</mcp-env-var>",
        "in": "header",
        "envVarName": "API_KEY",
        "schemeType": "http",
        "schemeScheme": "bearer"
    }
];
export const inputParams = z.object({ "body": z.object({ "corporation": z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The corporation's address."), "beneficial_owners": z.array(z.object({ "company_title": z.string().min(1).max(200).describe("This person's role or title within the entity.").optional(), "individual": z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The individual's address."), "confirmed_no_us_tax_id": z.boolean().describe("The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).").optional(), "date_of_birth": z.string().date().describe("The person's date of birth in YYYY-MM-DD format."), "identification": z.object({ "drivers_license": z.object({ "expiration_date": z.string().date().describe("The driver's license's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the driver's license."), "state": z.string().min(1).max(200).describe("The state that issued the provided driver's license.") }).describe("Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.").optional(), "method": z.enum(["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]).describe("A method that can be used to verify the individual's identity."), "number": z.string().min(4).max(200).describe("An identification number that can be used to verify the individual's identity, such as a social security number."), "other": z.object({ "country": z.string().min(1).max(200).describe("The two-character ISO 3166-1 code representing the country that issued the document."), "description": z.string().min(1).max(200).describe("A description of the document submitted."), "expiration_date": z.string().date().describe("The document's expiration date in YYYY-MM-DD format.").optional(), "file_id": z.string().describe("The identifier of the File containing the document.") }).describe("Information about the identification document provided. Required if `method` is equal to `other`.").optional(), "passport": z.object({ "country": z.string().min(1).max(200).describe("The country that issued the passport."), "expiration_date": z.string().date().describe("The passport's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the passport.") }).describe("Information about the passport used for identification. Required if `method` is equal to `passport`.").optional() }).describe("A means of verifying the person's identity."), "name": z.string().min(1).max(200).describe("The person's legal name.") }).describe("Personal details for the beneficial owner."), "prong": z.enum(["ownership", "control"]).describe("Why this person is considered a beneficial owner of the entity.") })).describe("The identifying details of anyone controlling or owning 25% or more of the corporation."), "incorporation_state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.").optional(), "name": z.string().min(1).max(200).describe("The legal name of the corporation."), "tax_identifier": z.string().min(1).max(200).describe("The Employer Identification Number (EIN) for the corporation."), "website": z.string().describe("The website of the corporation.").optional() }).describe("Details of the corporation entity to create. Required if `structure` is equal to `corporation`.").optional(), "description": z.string().min(1).max(200).describe("The description you choose to give the entity.").optional(), "joint": z.object({ "individuals": z.array(z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The individual's address."), "confirmed_no_us_tax_id": z.boolean().describe("The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).").optional(), "date_of_birth": z.string().date().describe("The person's date of birth in YYYY-MM-DD format."), "identification": z.object({ "drivers_license": z.object({ "expiration_date": z.string().date().describe("The driver's license's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the driver's license."), "state": z.string().min(1).max(200).describe("The state that issued the provided driver's license.") }).describe("Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.").optional(), "method": z.enum(["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]).describe("A method that can be used to verify the individual's identity."), "number": z.string().min(4).max(200).describe("An identification number that can be used to verify the individual's identity, such as a social security number."), "other": z.object({ "country": z.string().min(1).max(200).describe("The two-character ISO 3166-1 code representing the country that issued the document."), "description": z.string().min(1).max(200).describe("A description of the document submitted."), "expiration_date": z.string().date().describe("The document's expiration date in YYYY-MM-DD format.").optional(), "file_id": z.string().describe("The identifier of the File containing the document.") }).describe("Information about the identification document provided. Required if `method` is equal to `other`.").optional(), "passport": z.object({ "country": z.string().min(1).max(200).describe("The country that issued the passport."), "expiration_date": z.string().date().describe("The passport's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the passport.") }).describe("Information about the passport used for identification. Required if `method` is equal to `passport`.").optional() }).describe("A means of verifying the person's identity."), "name": z.string().min(1).max(200).describe("The person's legal name.") })).describe("The two individuals that share control of the entity."), "name": z.string().min(1).max(200).describe("The name of the joint entity.").optional() }).describe("Details of the joint entity to create. Required if `structure` is equal to `joint`.").optional(), "natural_person": z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The individual's address."), "confirmed_no_us_tax_id": z.boolean().describe("The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).").optional(), "date_of_birth": z.string().date().describe("The person's date of birth in YYYY-MM-DD format."), "identification": z.object({ "drivers_license": z.object({ "expiration_date": z.string().date().describe("The driver's license's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the driver's license."), "state": z.string().min(1).max(200).describe("The state that issued the provided driver's license.") }).describe("Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.").optional(), "method": z.enum(["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]).describe("A method that can be used to verify the individual's identity."), "number": z.string().min(4).max(200).describe("An identification number that can be used to verify the individual's identity, such as a social security number."), "other": z.object({ "country": z.string().min(1).max(200).describe("The two-character ISO 3166-1 code representing the country that issued the document."), "description": z.string().min(1).max(200).describe("A description of the document submitted."), "expiration_date": z.string().date().describe("The document's expiration date in YYYY-MM-DD format.").optional(), "file_id": z.string().describe("The identifier of the File containing the document.") }).describe("Information about the identification document provided. Required if `method` is equal to `other`.").optional(), "passport": z.object({ "country": z.string().min(1).max(200).describe("The country that issued the passport."), "expiration_date": z.string().date().describe("The passport's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the passport.") }).describe("Information about the passport used for identification. Required if `method` is equal to `passport`.").optional() }).describe("A means of verifying the person's identity."), "name": z.string().min(1).max(200).describe("The person's legal name.") }).describe("Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.").optional(), "relationship": z.enum(["affiliated", "informational", "unaffiliated"]).describe("The relationship between your group and the entity."), "structure": z.enum(["corporation", "natural_person", "joint", "trust"]).describe("The type of Entity to create."), "supplemental_documents": z.array(z.object({ "file_id": z.string().describe("The identifier of the File containing the document.") })).describe("Additional documentation associated with the entity.").optional(), "trust": z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The trust's address."), "category": z.enum(["revocable", "irrevocable"]).describe("Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust."), "formation_document_file_id": z.string().describe("The identifier of the File containing the formation document of the trust.").optional(), "formation_state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.").optional(), "grantor": z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The individual's address."), "confirmed_no_us_tax_id": z.boolean().describe("The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).").optional(), "date_of_birth": z.string().date().describe("The person's date of birth in YYYY-MM-DD format."), "identification": z.object({ "drivers_license": z.object({ "expiration_date": z.string().date().describe("The driver's license's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the driver's license."), "state": z.string().min(1).max(200).describe("The state that issued the provided driver's license.") }).describe("Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.").optional(), "method": z.enum(["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]).describe("A method that can be used to verify the individual's identity."), "number": z.string().min(4).max(200).describe("An identification number that can be used to verify the individual's identity, such as a social security number."), "other": z.object({ "country": z.string().min(1).max(200).describe("The two-character ISO 3166-1 code representing the country that issued the document."), "description": z.string().min(1).max(200).describe("A description of the document submitted."), "expiration_date": z.string().date().describe("The document's expiration date in YYYY-MM-DD format.").optional(), "file_id": z.string().describe("The identifier of the File containing the document.") }).describe("Information about the identification document provided. Required if `method` is equal to `other`.").optional(), "passport": z.object({ "country": z.string().min(1).max(200).describe("The country that issued the passport."), "expiration_date": z.string().date().describe("The passport's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the passport.") }).describe("Information about the passport used for identification. Required if `method` is equal to `passport`.").optional() }).describe("A means of verifying the person's identity."), "name": z.string().min(1).max(200).describe("The person's legal name.") }).describe("The grantor of the trust. Required if `category` is equal to `revocable`.").optional(), "name": z.string().min(1).max(200).describe("The legal name of the trust."), "tax_identifier": z.string().min(1).max(200).describe("The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.").optional(), "trustees": z.array(z.object({ "individual": z.object({ "address": z.object({ "city": z.string().min(1).max(200).describe("The city of the address."), "line1": z.string().min(1).max(200).describe("The first line of the address. This is usually the street number and street."), "line2": z.string().min(1).max(200).describe("The second line of the address. This might be the floor or room number.").optional(), "state": z.string().min(1).max(200).describe("The two-letter United States Postal Service (USPS) abbreviation for the state of the address."), "zip": z.string().min(1).max(200).describe("The ZIP code of the address.") }).describe("The individual's address."), "confirmed_no_us_tax_id": z.boolean().describe("The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).").optional(), "date_of_birth": z.string().date().describe("The person's date of birth in YYYY-MM-DD format."), "identification": z.object({ "drivers_license": z.object({ "expiration_date": z.string().date().describe("The driver's license's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the driver's license."), "state": z.string().min(1).max(200).describe("The state that issued the provided driver's license.") }).describe("Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.").optional(), "method": z.enum(["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]).describe("A method that can be used to verify the individual's identity."), "number": z.string().min(4).max(200).describe("An identification number that can be used to verify the individual's identity, such as a social security number."), "other": z.object({ "country": z.string().min(1).max(200).describe("The two-character ISO 3166-1 code representing the country that issued the document."), "description": z.string().min(1).max(200).describe("A description of the document submitted."), "expiration_date": z.string().date().describe("The document's expiration date in YYYY-MM-DD format.").optional(), "file_id": z.string().describe("The identifier of the File containing the document.") }).describe("Information about the identification document provided. Required if `method` is equal to `other`.").optional(), "passport": z.object({ "country": z.string().min(1).max(200).describe("The country that issued the passport."), "expiration_date": z.string().date().describe("The passport's expiration date in YYYY-MM-DD format."), "file_id": z.string().describe("The identifier of the File containing the passport.") }).describe("Information about the passport used for identification. Required if `method` is equal to `passport`.").optional() }).describe("A means of verifying the person's identity."), "name": z.string().min(1).max(200).describe("The person's legal name.") }).describe("Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.").optional(), "structure": z.literal("individual").describe("The structure of the trustee.") })).describe("The trustees of the trust.") }).describe("Details of the trust entity to create. Required if `structure` is equal to `trust`.").optional() }).optional() }).shape;
