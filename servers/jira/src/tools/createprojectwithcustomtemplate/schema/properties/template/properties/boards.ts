import { z } from "zod"

export const inputParams = {
  "boards": z.array(z.object({ "boardFilterJQL": z.string().describe("Takes in a JQL string to create a new filter. If no value is provided, it'll default to a JQL filter for the project creating").optional(), "cardLayout": z.object({ "showDaysInColumn": z.union([z.literal(true), z.literal(false)]).describe("Whether to show days in column") }).strict().describe("Card layout configuration.").optional(), "columns": z.array(z.object({ "maximumIssueConstraint": z.number().int().describe("The maximum issue constraint for the column").optional(), "minimumIssueConstraint": z.number().int().describe("The minimum issue constraint for the column").optional(), "name": z.string().describe("The name of the column").optional(), "statusIds": z.array(z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation")).describe("The status IDs for the column").optional() }).strict().describe("The payload for creating a board column")).describe("The columns of the board").optional(), "features": z.array(z.object({ "featureKey": z.enum(["ESTIMATION","SPRINT"]).describe("The key of the feature").optional(), "state": z.union([z.literal(true), z.literal(false)]).describe("Whether the feature should be turned on or off").optional() }).strict().describe("The payload for setting a board feature")).describe("Feature settings for the board").optional(), "name": z.string().describe("The name of the board").optional(), "pcri": z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation").optional(), "quickFilters": z.array(z.object({ "description": z.string().describe("The description of the quick filter").optional(), "jqlQuery": z.string().describe("The jql query for the quick filter").optional(), "name": z.string().describe("The name of the quick filter").optional() }).strict().describe("The payload for defining quick filters")).describe("The quick filters for the board.").optional(), "supportsSprint": z.boolean().describe("Whether sprints are supported on the board"), "swimlanes": z.object({ "customSwimlanes": z.array(z.object({ "description": z.string().describe("The description of the quick filter").optional(), "jqlQuery": z.string().describe("The jql query for the quick filter").optional(), "name": z.string().describe("The name of the quick filter").optional() }).strict().describe("The payload for custom swimlanes")).describe("The custom swimlane definitions.").optional(), "defaultCustomSwimlaneName": z.string().describe("The name of the custom swimlane to use for work items that don't match any other swimlanes.").optional(), "swimlaneStrategy": z.enum(["none","custom","parentChild","assignee","assigneeUnassignedFirst","epic","project","issueparent","issuechildren","request_type"]).describe("The swimlane strategy for the board.").optional() }).strict().describe("The payload for customising a swimlanes on a board").optional(), "workingDaysConfig": z.object({ "friday": z.boolean().optional(), "id": z.number().int().optional(), "monday": z.boolean().optional(), "nonWorkingDays": z.array(z.object({ "id": z.number().int().optional(), "iso8601Date": z.string().optional() }).strict()).optional(), "saturday": z.boolean().optional(), "sunday": z.boolean().optional(), "thursday": z.boolean().optional(), "timezoneId": z.string().optional(), "tuesday": z.boolean().optional(), "wednesday": z.boolean().optional() }).strict().describe("Working days configuration").optional() }).strict().describe("The payload for creating a board")).describe("The boards to be associated with the project.").optional()
}