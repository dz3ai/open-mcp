import { z } from "zod"

export const inputParams = {
  "comment": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `comment` to the tool, first call the tool `expandSchema` with \"/properties/comment\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>A comment.</property-description>").optional(),
  "inwardIssue": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `inwardIssue` to the tool, first call the tool `expandSchema` with \"/properties/inwardIssue\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The ID or key of a linked issue.</property-description>"),
  "outwardIssue": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `outwardIssue` to the tool, first call the tool `expandSchema` with \"/properties/outwardIssue\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The ID or key of a linked issue.</property-description>"),
  "type": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `type` to the tool, first call the tool `expandSchema` with \"/properties/type\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>This object is used as follows:\n\n *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).\n *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.</property-description>")
}