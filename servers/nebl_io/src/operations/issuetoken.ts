import { z } from "zod"

export const toolName = `issuetoken`
export const toolDescription = `Builds a transaction that issues a new NTP1 Token`
export const baseUrl = `https://ntp1node.nebl.io`
export const path = `/ntp1/issue`
export const method = `post`
export const security = []

export const inputParams = z.object({ "body": z.object({ "amount": z.number().describe("Number of tokens to issue"), "divisibility": z.number().describe("Number of decimal places the token should be divisble by (0-7)"), "fee": z.number().describe("Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)"), "flags": z.object({ "splitChange": z.boolean().describe("If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)").optional() }).describe("Object representing flags that potentialy modify this transaction").optional(), "issueAddress": z.string().describe("Address issuing the token"), "metadata": z.object({ "description": z.string().describe("Long name or description of token (ex. Nibble)").optional(), "encryptions": z.array(z.object({ "format": z.string().describe("key format (pem or der)").optional(), "key": z.string().describe("userData key to encrypt").optional(), "pubkey": z.string().describe("RSA public key used for encryption").optional(), "type": z.string().describe("pkcs1 or pkcs8").optional() })).describe("Array of encryption instruction objects for encrypting userData").optional(), "issuer": z.string().describe("Name of token issuer").optional(), "rules": z.object({ "expiration": z.object({ "locked": z.boolean().describe("Whether this rule can be modified in future transactions").optional(), "validUntil": z.number().describe("Blockheight at wh").optional() }).describe("Object describing expiration rules of the token").optional(), "fees": z.object({ "items": z.array(z.object({ "address": z.string().describe("Address fee is auto sent to").optional(), "tokenId": z.string().describe("How fee should be paid, either with a tokenId, or with NEBL if null").optional(), "value": z.string().describe("Amount of NTP1 token, or NEBL (in satoshi) to pay as fee").optional() })).describe("Array of objects describing fee rules").optional(), "locked": z.boolean().describe("Whether this rule can be modified in future transactions").optional() }).optional(), "holders": z.array(z.object({ "address": z.string().describe("Address that can hold the token").optional(), "locked": z.boolean().describe("Whether this rule can be modified in future transactions").optional() })).describe("Array of objects describing what addresses can hold the token").optional() }).describe("Object describing token rules").optional(), "tokenName": z.string().describe("Token Symbol it will be identified by (ex. NIBBL)").optional(), "urls": z.array(z.object({ "dataHash": z.string().describe("Hash of data at the URL, used for verification").optional(), "mimeType": z.string().describe("mimeType of URL content").optional(), "name": z.string().describe("Name of the URL").optional(), "url": z.string().describe("Actual URL").optional() })).optional(), "userData": z.object({ "meta": z.array(z.object({ "key": z.string().optional(), "value": z.string().optional() })).optional() }).describe("Metadata set by user on token").optional() }).describe("Object representing all metadata at token issuance").optional(), "reissuable": z.boolean().describe("whether the token should be reissuable"), "transfer": z.array(z.object({ "address": z.string().describe("Address to send the amount of issued tokens to").optional(), "amount": z.number().optional() })) }).optional() }).shape