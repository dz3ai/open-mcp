import { z } from "zod";
export const toolName = `put_order_requires_delivery_acceptance`;
export const toolDescription = `Order requires delivery acceptance`;
export const baseUrl = `https://uk.api.just-eat.io`;
export const path = `/order-requires-delivery-acceptance`;
export const method = `put`;
export const security = [];
export const inputParams = z.object({ "body": z.array(z.object({ "BasketInfo": z.object({ "BasketId": z.string().describe("Unique Basket Id for the Order.").optional(), "DeliveryCharge": z.number().describe("Amount of cost that comes from delivery.").optional(), "Discount": z.number().describe("The discount amount, used in conjunction with `DiscountType`.").optional(), "Discounts": z.array(z.object({ "Discount": z.number().describe("The discount amount, used in conjunction with `DiscountType`.").optional(), "DiscountType": z.string().describe("The type of discount, e.g. a percentage or the order or fixed amount.").optional(), "Id": z.number().describe("Basket item id.").optional(), "QualifyingValue": z.number().describe("The minimum order amount in order for this discount to be applicable.").optional() }).describe("Discount data")).describe("Any Discounts applied to the Order.").optional(), "GroupedBasketItems": z.array(z.object({ "BasketItem": z.object({ "CombinedPrice": z.number().describe("Unit Price plus individual Meal Part item cost.").optional(), "Discounts": z.array(z.object({ "Amount": z.number().describe("Amount of the discount applied").optional(), "DiscountType": z.string().describe("Type of the discount applied").optional() }).describe("Discount data")).describe("Any discounts applied to this specific item.").optional(), "MealParts": z.array(z.object({ "GroupId": z.number().describe("The group Id.").optional(), "MealPartId": z.number().describe("The meal part Id.").optional(), "Name": z.string().describe("The name of the meal part.").optional(), "OptionalAccessories": z.array(z.object({ "Name": z.string().describe("The name of the accessory.").optional(), "OptionalAccessoryId": z.number().describe("The accessory Id.").optional(), "Quantity": z.number().describe("The quantity of the accessory.").optional(), "UnitPrice": z.number().describe("The unit price of the accessory.").optional() }).describe("Optional accessory")).describe("Optional accessories").optional(), "RequiredAccessories": z.array(z.object({ "GroupId": z.number().describe("The group Id of the accessory.").optional(), "Name": z.string().describe("The name of the accessory.").optional(), "RequiredAccessoryId": z.number().describe("The accessory Id.").optional(), "UnitPrice": z.number().describe("The unit price of the accessory.").optional() }).describe("Required accessory")).describe("Required accessories").optional(), "Synonym": z.string().describe("The synonym of the meal part.").optional() }).describe("Meal part data")).describe("Represents sub-parts of a meal.").optional(), "MenuCardNumber": z.string().describe("Menu card number.").optional(), "MultiBuyDiscounts": z.array(z.object({ "Amount": z.number().describe("Amount of the discount applied").optional(), "DiscountType": z.string().describe("Type of the discount applied").optional(), "OrderItemId": z.string().describe("Id of the Order item.").optional(), "ProductTypeId": z.number().describe("The Id of the product type the discount applies to.").optional() }).describe("Multi-purchase discount data")).describe("Any multi-purchase discounts applied to this item.").optional(), "Name": z.string().describe("The Item name, e.g. Chicken Tikka Masala or Family Meal Deal 3.").optional(), "OptionalAccessories": z.array(z.object({ "Name": z.string().describe("The name of the accessory.").optional(), "OptionalAccessoryId": z.number().describe("The accessory Id.").optional(), "Quantity": z.number().describe("The quantity of the accessory.").optional(), "UnitPrice": z.number().describe("The unit price of the accessory.").optional() }).describe("Optional accessory")).describe("An option item added to the Basket Item, this may be options such as Garlic Bread or a bottle of Coke.").optional(), "ProductId": z.number().describe("Id of the Product.").optional(), "ProductTypeId": z.number().describe("Id of the Product.").optional(), "RequiredAccessories": z.array(z.object({ "GroupId": z.number().describe("The group Id of the accessory.").optional(), "Name": z.string().describe("The name of the accessory.").optional(), "RequiredAccessoryId": z.number().describe("The accessory Id.").optional(), "UnitPrice": z.number().describe("The unit price of the accessory.").optional() }).describe("Required accessory")).describe("Items required as part of the Item, for example, Pizza base sauce.").optional(), "Synonym": z.string().describe("Legacy - ignore.").optional(), "UnitPrice": z.number().describe("The price of the item.").optional() }).describe("An item in the Basket.").optional(), "CombinedPrice": z.number().describe("The total price of the Basket Item (including discounts).").optional(), "MenuCardNumber": z.string().describe("Menu card number.").optional(), "OrderSubId": z.number().describe("Order `SubId`").optional(), "Quantity": z.number().describe("The quantity of Basket Items requested.").optional() }).describe("An item in the Basket.")).describe("Grouped basket items").optional(), "MenuId": z.number().describe("Id of the Restaurant's menu.").optional(), "MultiBuyDiscount": z.number().describe("MultiBuy discount.").optional(), "SubTotal": z.number().describe("The Basket total cost, excluding any discounts.").optional(), "ToSpend": z.number().describe("Amount to spend.").optional(), "Total": z.number().describe("Total price of the Order.").optional() }).describe("Basket data").optional(), "CustomerInfo": z.object({ "Address": z.string().describe("Customer Address. Note that Address is comma delimited.").optional(), "City": z.string().describe("The name of the city where the Customer is located.").optional(), "DisplayPhoneNumber": z.string().describe("The customer's masked phone number.").optional(), "Email": z.string().describe("Email address for the Customer.").optional(), "Id": z.string().describe("The JUST EAT Customer Id.").optional(), "Latitude": z.number().describe("Customer address latitude. Will be 0 if not provided.").optional(), "LocationAccuracyDescription": z.string().describe("Location accuracy description").optional(), "LocationAccuracyInMeters": z.number().describe("Accuracy of the location data in meters.").optional(), "LocationSource": z.string().describe("Provider of the location data.").optional(), "Longitude": z.number().describe("Customer address longitude. Will be 0 if not provided.").optional(), "Name": z.string().describe("The name of the Customer.").optional(), "PhoneMaskingCode": z.string().describe("Code to use when calling customer phone masked number (`DisplayPhoneNumber`) about this order. Null if phone masking not enabled").optional(), "PhoneNumber": z.string().describe("The customer's unmasked phone number. Please don't expose this to drivers, instead use this number to provide your own phone masking number or use the JustEat masked number `DisplayPhoneNumber` below").optional(), "Postcode": z.string().describe("The post code where Customer is located.").optional(), "PreviousRestuarantOrderCount": z.number().describe("The number of Orders the Customer has placed at this Restaurant via JUST EAT").optional(), "TimeZone": z.string().describe("Customer timezone, e.g. 'Central European Standard Time'.").optional() }).describe("Customer data").optional(), "FriendlyOrderReference": z.string().describe("The customer facing identifier for the order, which should be used in any UI or receipts to identify the order to the customer, driver or restaurant. This identifier is not guaranteed to be globally unique.").optional(), "Order": z.object({ "DueDateWithUtcOffset": z.string().datetime({ offset: true }).describe("The DateTime when the Customer has been told they will receive the Order.").optional(), "InitialDueDateWithUtcOffset": z.string().datetime({ offset: true }).describe("When the Customer was originally told the order would be delivered (prior to Restaurant adjustment)").optional(), "NoteToRestaurant": z.string().describe("Notes from the customer about their order. In addition to notes for the restaurant, this field can also delivery instructions - and should be displayed to the delivery driver.").optional(), "PickupNoticePeriod": z.string().describe("Desired minimum amount of notice needed before the driver arrives to pickup the order at the restaurant. This is to allow restaurant enough time to prepare the order. If less notice is given the driver may have to wait for the order to be prepared. Field is in the format \"hh:mm:ss\"").optional(), "PlacedDate": z.string().datetime({ offset: true }).describe("Date Customer placed the order. Note that JUST EAT accepts pre-orders therefore there may be a significant difference between Placed Date and Due Date This Date/Time is set as UTC without an offset, regardless of Country.").optional(), "PromptAsap": z.boolean().describe("Did the Customer request the Order to ready ASAP").optional(), "RdsPickupTimeWithUtcOffset": z.string().datetime({ offset: true }).describe("When the Delivery Partner needs to be at the Restaurant to pickup the Order.").optional(), "ServiceType": z.enum(["Collection", "Delivery"]).describe("Type of the Order.").optional() }).describe("Order data").optional(), "OrderId": z.string().describe("Globally unique Identifier for the order. Please use this whenever sending requests related to this order. Just Eat will provide this same identifier on any further messages relating to this order.").optional(), "PaymentInfo": z.object({ "CashOnDelivery": z.boolean().describe("Is the Customer paying on Delivery.").optional(), "DriverTipValue": z.number().describe("The value of the tip given to the Driver.").optional(), "PaidDate": z.string().datetime({ offset: true }).describe("DateTime when the Order was Paid (excludes UTC offset).").optional(), "PaymentLines": z.array(z.object({ "CardFee": z.number().describe("Was there a fee for the payment mechanism.").optional(), "Type": z.literal("Card").describe("How was the order Paid.").optional(), "Value": z.number().describe("The value of the payment.").optional() }).describe("Payment line data")).describe("How the Customer has paid for the Order.").optional(), "Total": z.number().describe("The total order value.").optional(), "TotalComplementary": z.number().describe("Order amount covered by JUST EAT.").optional() }).describe("Payment data").optional(), "RestaurantInfo": z.object({ "AddressLines": z.array(z.string().describe("Address line")).describe("Restaurant address.").optional(), "City": z.string().describe("The name of the city where the Restaurant is located").optional(), "DispatchMethod": z.string().describe("`DispatchMethod` to use.").optional(), "EmailAddress": z.string().describe("Email address for the Restaurant.").optional(), "Id": z.string().describe("Unique ID of the Restaurant.").optional(), "Latitude": z.number().describe("Restaurant address latitude. Will be 0 if not provided.").optional(), "Longitude": z.number().describe("Restaurant address longitude. Will be 0 if not provided.").optional(), "Name": z.string().describe("The name of the Restaurant.").optional(), "PhoneNumber": z.string().describe("The Restaurant phone number.").optional(), "PickupNotes": z.string().describe("Order pickup instructions for the Delivery Partner.").optional(), "Postcode": z.string().describe("The post code where Restaurant is located").optional() }).describe("Restaurant data").optional(), "Restrictions": z.array(z.object({ "Type": z.literal("Alcohol").describe("The type of restricted item contained in the order. The only supported value is 'Alcohol'.").optional() })).describe("This is a list of types of restricted items contained in the order.").optional() })).optional() }).shape;
