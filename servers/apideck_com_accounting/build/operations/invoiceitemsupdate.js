import { z } from "zod";
export const toolName = `invoiceitemsupdate`;
export const toolDescription = `Update Invoice Item`;
export const baseUrl = `https://unify.apideck.com`;
export const path = `/accounting/invoice-items/{id}`;
export const method = `patch`;
export const security = [
    {
        "key": "Authorization",
        "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
        "in": "header",
        "envVarName": "AUTHORIZATION",
        "schemeType": "apiKey",
        "schemeName": "Authorization"
    }
];
export const inputParams = z.object({ "path": z.object({ "id": z.string().describe("ID of the record you are acting upon.") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "body": z.object({ "active": z.boolean().nullable().optional(), "asset_account": z.object({ "code": z.string().nullable().describe("The code assigned to the account.").optional(), "id": z.string().describe("The unique identifier for the account.").optional(), "name": z.string().nullable().describe("The name of the account.").readonly().optional(), "nominal_code": z.string().nullable().describe("The nominal code of the account.").optional() }).nullable().optional(), "code": z.string().nullable().describe("User defined item code").optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "description": z.string().nullable().describe("A short description of the item").optional(), "expense_account": z.object({ "code": z.string().nullable().describe("The code assigned to the account.").optional(), "id": z.string().describe("The unique identifier for the account.").optional(), "name": z.string().nullable().describe("The name of the account.").readonly().optional(), "nominal_code": z.string().nullable().describe("The nominal code of the account.").optional() }).nullable().optional(), "id": z.string().describe("The ID of the item.").readonly().optional(), "income_account": z.object({ "code": z.string().nullable().describe("The code assigned to the account.").optional(), "id": z.string().describe("The unique identifier for the account.").optional(), "name": z.string().nullable().describe("The name of the account.").readonly().optional(), "nominal_code": z.string().nullable().describe("The nominal code of the account.").optional() }).nullable().optional(), "inventory_date": z.string().date().nullable().describe("The date of opening balance if inventory item is tracked - YYYY-MM-DD.").optional(), "name": z.string().nullable().describe("Item name").optional(), "purchase_details": z.object({ "tax_inclusive": z.boolean().nullable().describe("Amounts are including tax").optional(), "tax_rate": z.object({ "code": z.string().nullable().describe("Tax rate code").readonly().optional(), "id": z.string().nullable().describe("The ID of the object.").optional(), "name": z.string().nullable().describe("Name of the tax rate").readonly().optional(), "rate": z.number().nullable().describe("Rate of the tax rate").readonly().optional() }).optional(), "unit_of_measure": z.string().nullable().describe("Description of the unit type the item is sold as, ie: kg, hour.").optional(), "unit_price": z.number().nullable().optional() }).optional(), "purchased": z.boolean().nullable().describe("Item is available for purchase transactions").optional(), "quantity": z.number().nullable().optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "sales_details": z.object({ "tax_inclusive": z.boolean().nullable().describe("Amounts are including tax").optional(), "tax_rate": z.object({ "code": z.string().nullable().describe("Tax rate code").readonly().optional(), "id": z.string().nullable().describe("The ID of the object.").optional(), "name": z.string().nullable().describe("Name of the tax rate").readonly().optional(), "rate": z.number().nullable().describe("Rate of the tax rate").readonly().optional() }).optional(), "unit_of_measure": z.string().nullable().describe("Description of the unit type the item is sold as, ie: kg, hour.").optional(), "unit_price": z.number().nullable().optional() }).optional(), "sold": z.boolean().nullable().describe("Item will be available on sales transactions").optional(), "taxable": z.boolean().nullable().describe("If true, transactions for this item are taxable").optional(), "tracked": z.boolean().nullable().describe("Item is inventoried").optional(), "type": z.enum(["inventory", "service", "other"]).nullable().describe("Item type").optional(), "unit_price": z.number().nullable().optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional() }).strict().optional() }).shape;
