import { z } from "zod"

export const toolName = `post_messages`
export const toolDescription = `Send Messages`
export const baseUrl = `https://api.bulksms.com/v1`
export const path = `/messages`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "Basic <mcp-env-var>USERNAME_PASSWORD_BASE64</mcp-env-var>",
    "in": "header",
    "envVarName": "USERNAME_PASSWORD_BASE64",
    "schemeType": "http",
    "schemeScheme": "basic"
  }
]

export const inputParams = z.object({ "query": z.object({ "deduplication-id": z.number().int().describe("Safeguards against the possibility of sending the same messages more than once.\n\nIf a communication failure occurs during a submission, you cannot be sure that the submission was processed; therefore you would have to submit it again. When you post the retry, you must use the `deduplication-id` of the original post. The BulkSMS system uses this ID to check that the request was not previously processed. (If it was previously processed, the submission will succeed, and the behaviour will be indistinguishable to you from a non-duplicated submission). The ID expires after about 12 hours.\n").optional(), "auto-unicode": z.boolean().describe("Specifies how to deal with message text that contains characters not present in the GSM 03.38 character set.\n\nMessages that contain only GSM 03.38 characters are not affected by this setting. \nIf the value is `true` then a message containing non-GSM 03.38 characters will be transmitted as a Unicode SMS (which is most likely more costly). \n\nPlease note: when `auto-unicode` is `true` and the value of the `encoding` property is specified as `UNICODE`, the message will always be sent as `UNICODE`.\n\nIf the value is `false` and the `encoding` property is `TEXT` then non-GSM 03.38 characters will be replaced by the `?` character.\n\nWhen using this setting on the API, you should take case to ensure that your message is _clean_.  \n\nInvisible unicode and unexpected characters could unintentionally convert an message to `UNICODE`.  A common mistake is to use the backtick character (\\`) which is unicode and will turn your `TEXT` message into a `UNICODE` message.\n"), "schedule-date": z.string().datetime({ offset: true }).describe("Allows you to send a message in the future.\n\nAn example value is `2019-02-18T13:00:00+02:00`.  It encodes to `2019-02-18T13%3A00%3A00%2B02%3A00`.\nCredits are deducted from your account immediately. Once submitted, scheduled messages cannot be changed or cancelled.\nThe date can be a maximum of two years in the future. If the value is in the past, the message will be sent immediately.\nThe date format requires you to supply an offset from UTC. You can decide to use the offset of your timezone, or maybe the zone of the recipient's location is more appropriate.\nIf the destination is a group, the group members are determined at the time that you submit the message; not the time the message is scheduled to be sent.\n").optional(), "schedule-description": z.string().describe("A note that is stored together with a scheduled submission, which could be used to more easily identify the scheduled submission at a later date.\n\nThe value of this field is ignored if the `schedule-date` is not provided.\nA value that is longer than 256 characters is truncated.\n").optional() }).optional(), "body": z.array(z.object({ "body": z.string().describe("The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.\n\nThe message content can also contain templates, read the [body templates section](#tag/Message) for more information.\n"), "deliveryReports": z.enum(["ALL","ERRORS","NONE"]).describe("The type of delivery reports to request from the delivering network.\nThe default value  is `ALL`. Please note that not all networks support delivery reports.\nALL. All possible delivery reports\nERRORS. Only error delivery reports\nNONE. No delivery reports").optional(), "encoding": z.enum(["TEXT","UNICODE","BINARY"]).describe("Describes the content of the message body.\n\nTypically this is TEXT, which is the default if no value is provided.\n\nIf you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.\n\nIf you want to send a sequence of bytes, you must use BINARY.\n\nYou can also or use the `auto-unicode` parameter of the Send Messages Operation.   \n\nIf you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.\n\nIf you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place.\n").optional(), "from": z.object({ "address": z.string().describe("The address of the sender id.\n\nThe validation for this field depends on the value of the `type`.\nINTERNATIONAL can start with `+`. It has a maximum length of 15 digits, and has to be longer than 6 digits.\nALPHANUMERIC has a maximum length of 11 characters.\nSHORTCODE has a maximum length of 6 digits.\nREPLIABLE should not specify a value here.\n").optional(), "type": z.enum(["INTERNATIONAL","ALPHANUMERIC","SHORTCODE","REPLIABLE"]).describe("The type of the sender id.\n\nIf you want BulkSMS to collect replies to this message on your behalf, specify the type as REPLIABLE.  If the recipient is in a country where BulkSMS does not have a local reply number, the reply may incur costs that are more expensive than sending a local SMS in that country.\nIf you operate a service from a shortcode in a locale that allows messaging from such a shortcode, you can specify SHORTCODE for the type.\n") }).describe("Identifies the sender.\n\nInstead of a structured object, you can supply a string value here. \nIf you do this, the `type` of the sender is derived to be either INTERNATIONAL or ALPHANUMERIC.  If the value does not begin with a `+` and it contains at least one character that is not a digit, the type is detected as ALPHANUMERIC. Otherwise, the type is detected as INTERNATIONAL.\n").optional(), "longMessageMaxParts": z.number().int().describe("The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS).\nThe default is `3`.\n").optional(), "messageClass": z.enum(["FLASH_SMS","ME_SPECIFIC","SIM_SPECIFIC","TE_SPECIFIC"]).describe("The class of the message, as specified by ยง4 of the GSM 03.38 specification.\n\nYou can provide either an integer value, or a mnemonic string.\n\nThe default value is SIM_SPECIFIC.\nNumeric values are\n| Name | Value|\n|------|------|\n| FLASH_SMS | 0      |\n| ME_SPECIFIC | 1    |\n| SIM_SPECIFIC | 2   |\n| TE_SPECIFIC | 3   |\n").optional(), "protocolId": z.enum(["IMPLICIT","SHORT_MESSAGE_TYPE_0","REPLACE_MESSAGE_1","REPLACE_MESSAGE_2","REPLACE_MESSAGE_3","REPLACE_MESSAGE_4","REPLACE_MESSAGE_5","REPLACE_MESSAGE_6","REPLACE_MESSAGE_7","RETURN_CALL","ME_DOWNLOAD","ME_DEPERSONALIZE","SIM_DOWNLOAD"]).describe("The TP-PID value from GSM 03.40[.750] ยง9.2.3.9.\n\nYou can provide either an integer value, or a mnemonic string.\n\nIf unspecified, this property defaults to `0`, representing the IMPLICIT value.\nNumeric values are listed below\n| Name | Value|\n|----- |------|\n| IMPLICIT              | 00 |\n| SHORT_MESSAGE_TYPE_0  | 64 |\n| REPLACE_MESSAGE_1     | 65 |\n| REPLACE_MESSAGE_2     | 66 |\n| REPLACE_MESSAGE_3     | 67 |\n| REPLACE_MESSAGE_4     | 68 |\n| REPLACE_MESSAGE_5     | 69 |\n| REPLACE_MESSAGE_6     | 70 |\n| REPLACE_MESSAGE_7     | 71 |\n| RETURN_CALL           | 95 |\n| ME_DOWNLOAD           | 125 |\n| ME_DEPERSONALIZE      | 126 |\n| SIM_DOWNLOAD          | 127 |\n").optional(), "routingGroup": z.enum(["ECONOMY","STANDARD","PREMIUM"]).describe("Allows you to choose routing. The default is STANDARD.\n").optional(), "to": z.array(z.object({ "address": z.string().describe("The phone number of the recipient.  It must be supplied if the `type` is INTERNATIONAL").optional(), "fields": z.array(z.string()).describe("Custom fields that can be used in the message body. A value can be given if the `type` is INTERNATIONAL\n\nRead the [body templates section](#tag/Message) for more information.\n").optional(), "id": z.string().describe("The id of a group in your phonebook.  A value can be given if the `type` is GROUP.").optional(), "name": z.string().describe("The name of a group in your phonebook. A value can be given if the `type` is GROUP.").optional(), "type": z.enum(["INTERNATIONAL","GROUP"]).describe("Type of the recipient. The default value is INTERNATIONAL.").optional() })).describe("Identifies the recipients\n\nInstead of an array of structured objects, you can also provide a single object, a simple string or an array of strings.\nIf you supply a string, the `type` is taken as INTERNATIONAL.\n"), "userSuppliedId": z.string().describe("Correlate the messages created from this submission to your data.\n\nThe value can contain no more than 20 characters.\n").optional() }).describe("An object that you use when posting messages.")).optional() }).shape