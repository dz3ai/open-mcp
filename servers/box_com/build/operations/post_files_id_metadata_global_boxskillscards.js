import { z } from "zod";
export const toolName = `post_files_id_metadata_global_boxskillscards`;
export const toolDescription = `Create Box Skill cards on file`;
export const baseUrl = `https://api.box.com/2.0`;
export const path = `/files/{file_id}/metadata/global/boxSkillsCards`;
export const method = `post`;
export const security = [
    {
        "key": "Authorization",
        "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
        "in": "header",
        "envVarName": "OAUTH2_TOKEN",
        "schemeType": "oauth2"
    }
];
export const inputParams = z.object({ "path": z.object({ "file_id": z.string().describe("The unique identifier that represents a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.") }).optional(), "body": z.object({ "cards": z.array(z.object({ "created_at": z.string().datetime({ offset: true }).describe("The optional date and time this card was created at.").optional(), "duration": z.number().int().describe("An optional total duration in seconds.\n\nUsed with a `skill_card_type` of `transcript` or\n`timeline`.").optional(), "entries": z.array(z.object({ "appears": z.array(z.object({ "end": z.number().int().describe("The time in seconds when an\nentry should stop appearing on a timeline. For\na `skill_card_type` of `transcript` this value\nis ignored.").optional(), "start": z.number().int().describe("The time in seconds when an\nentry should start appearing on a timeline.").optional() }).describe("The timestamp for an entry.")).describe("Defines a list of timestamps for an entry. This is\nused with a `skill_card_type` of `transcript` as\nwell as `timeline` to place items on a timeline.\n\nFor a `skill_card_type` of `transcript` there can\nonly be one entry in this list for each item, and\nonly the `start` time is used to place the\ntranscript on the timeline.").optional(), "image_url": z.string().describe("The image to show on a for an entry that appears\non a timeline. This image URL is required for any\n`timeline` cards. The image will be shown in a\nlist of items (for example faces), and clicking\nthe image will show the user where that entry\nappears during the duration of this entry.").optional(), "text": z.string().describe("The text of the entry. This would be the actual\nkeyword in a `keyword` card, the line of a\ntranscript in a `transcript` card, or the display\nname for an item when using the `timeline` entry.").optional() }).describe("An entry in the `entries` attribute of a metadata card")).describe("An optional list of entries in the metadata card.\n\nThis field is used with a `skill_card_type` of\n`transcript`, `keyword` or `timeline`.").optional(), "invocation": z.object({ "id": z.string().describe("A custom identifier that represent the instance of\nthe service that applied this metadata. For example,\nif your `image-recognition-service` runs on multiple\nnodes, this field can be used to identify the ID of\nthe node that was used to apply the metadata."), "type": z.literal("skill_invocation").describe("`skill_invocation`") }).describe("The invocation of this service, used to track\nwhich instance of a service applied the metadata."), "skill": z.object({ "id": z.string().describe("A custom identifier that represent the service that\napplied this metadata."), "type": z.literal("service").describe("`service`") }).describe("The service that applied this metadata."), "skill_card_title": z.object({ "code": z.string().describe("An optional identifier for the title.").optional(), "message": z.string().describe("The actual title to show in the UI.") }).describe("The title of the card.").optional(), "skill_card_type": z.enum(["transcript", "keyword", "timeline", "status"]).describe("The type of card to add to the file."), "status": z.object({ "code": z.enum(["invoked", "processing", "success", "transient_failure", "permanent_failure"]).describe("A code for the status of this Skill invocation. By\ndefault each of these will have their own accompanied\nmessages. These can be adjusted by setting the `message`\nvalue on this object."), "message": z.string().describe("A custom message that can be provided with this status.\nThis will be shown in the web app to the end user.").optional() }).describe("Used with a card of type `status` to set the status of the skill. This can be used to show a message to the user while the Skill is processing the data.").optional(), "type": z.literal("skill_card").describe("`skill_card`") }).describe("A generic Box Skill metadata card.")).describe("A list of Box Skill cards to apply to this file.") }).optional() }).shape;
