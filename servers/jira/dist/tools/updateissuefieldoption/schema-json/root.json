{
  "type": "object",
  "properties": {
    "fieldKey": {
      "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`",
      "type": "string"
    },
    "optionId": {
      "description": "The ID of the option to be updated.",
      "format": "int64",
      "type": "integer"
    },
    "config": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `config` to the tool, first call the tool `expandSchema` with \"/properties/config\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Details of the projects the option is available in.</property-description>",
      "additionalProperties": true
    },
    "id": {
      "description": "The unique identifier for the option. This is only unique within the select field's set of options.",
      "format": "int64",
      "type": "integer"
    },
    "properties": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `properties` to the tool, first call the tool `expandSchema` with \"/properties/properties\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.</property-description>",
      "additionalProperties": true
    },
    "value": {
      "description": "The option's name, which is displayed in Jira.",
      "type": "string"
    }
  },
  "required": [
    "fieldKey",
    "optionId",
    "id",
    "value"
  ]
}