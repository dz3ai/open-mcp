import { z } from "zod"

export const toolName = `asyncvrp`
export const toolDescription = `POST route optimization problem (batch mode)`
export const baseUrl = `https://graphhopper.com/api/1`
export const path = `/vrp/optimize`
export const method = `post`
export const security = [
  {
    "key": "key",
    "value": "<mcp-env-var>KEY</mcp-env-var>",
    "in": "query",
    "envVarName": "KEY",
    "schemeType": "apiKey",
    "schemeName": "key"
  }
]

export const inputParams = z.object({ "body": z.object({ "configuration": z.object({ "routing": z.object({ "calc_points": z.boolean().describe("It lets you specify whether the API should provide you with route geometries for vehicle routes or not. Thus, you do not need to do extra routing to get the polyline for each route."), "consider_traffic": z.boolean().describe("indicates whether historical traffic information should be considered"), "curbside_strictness": z.enum(["ignore","soft","strict"]).describe("In some cases curbside constraints cannot be fulfilled. For example in one-way streets you cannot arrive at a building that is on the left side of the street such that the building is to the right of you (unless you drove the one-way street the wrong/illegal way). You can set the `curbside_strictness` to `soft` to ignore the curbside constraint in such cases or set it to `strict` to get an error response instead. You can also set it to `ignore` to ignore all curbside constraints (this is useful to compare the results with and without constraints without modifying every single address)."), "fail_fast": z.boolean().describe("indicates whether matrix calculation should fail fast when points cannot be connected"), "network_data_provider": z.enum(["openstreetmap","tomtom"]).describe("specifies the data provider, read more about it [here](#section/Map-Data-and-Routing-Profiles)."), "return_snapped_waypoints": z.boolean().describe("Indicates whether a solution includes snapped waypoints. In contrary to the address coordinate a snapped waypoint is the access point to the (road) network."), "snap_preventions": z.array(z.enum(["motorway","trunk","bridge","ford","tunnel","ferry"])).describe("Prevents snapping locations to road links of specified road types, e.g. to motorway.").optional() }).describe("This contains all routing specific configurations.").optional() }).describe("Specifies general configurations.").optional(), "cost_matrices": z.array(z.object({ "data": z.object({ "distances": z.array(z.array(z.number())).min(1).optional(), "info": z.object({ "copyrights": z.array(z.string()).optional(), "took": z.number().optional() }).describe("Additional information for your request").optional(), "times": z.array(z.array(z.number().int())).min(1).optional() }).describe("JSON data of matrix response").optional(), "location_ids": z.array(z.string()).optional(), "profile": z.string().describe("vehicle profile or empty if catch all fallback").optional(), "type": z.enum(["default","google"]).describe("type of cost matrix, currently default or google are supported").optional() })).describe("Specifies your own tranport time and distance matrices.").optional(), "objectives": z.array(z.object({ "type": z.enum(["min","min-max"]).describe("Type of objective function, i.e. `min` or `min-max`.\n\n * `min`: Minimizes the objective value.\n * `min-max`: Minimizes the maximum objective value.\n\nFor instance, `min` -> `vehicles` minimizes the number of employed vehicles.\n`min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.\n\nIf you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan.\nThis only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.\nIf you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that\nthe completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours\nto serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,\nthis usually comes with higher transport costs.\n\nIf you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:\n\n```json\n\"objectives\" : [\n   {\n      \"type\": \"min\",\n      \"value\": \"vehicles\"\n   },\n   {\n      \"type\": \"min\",\n      \"value\": \"completion_time\"\n   }\n]\n```\n\nIf you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:\n\n```json\n\"objectives\" : [\n   {\n      \"type\": \"min-max\",\n      \"value\": \"completion_time\"\n   },\n   {\n      \"type\": \"min-max\",\n      \"value\": \"activities\"\n   }\n]\n```\n"), "value": z.enum(["completion_time","transport_time","vehicles","activities"]).describe("The value of the objective function.\nThe objective value `transport_time` solely considers the time\nyour drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account.\nThe `completion_time` of a route is defined as the time from starting to ending the route,\ni.e. the route's transport time, the sum of waiting times plus the sum of activity durations.\nNote that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in\nscenarios with time windows waiting times can occur.\nThe objective value `vehicles` can only be used along with `min` and minimizes vehicles.\n") })).describe("Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized.").optional(), "relations": z.array(z.union([z.object({ "ids": z.array(z.string()).describe("Specifies an array of shipment and/or service ids that are in relation. If you deal with services then you need to use the id of your services in ids. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use your shipment id plus the keyword `_pickup` or `_delivery`. If you want to place a service or shipment activity at the beginning of your route, use the special ID `start`. In turn, use `end` to place it at the end of the route."), "type": z.string().describe("Specifies the type of relation. It must be either of type `in_same_route`, `in_sequence` or `in_direct_sequence`.\n\n`in_same_route`: As the name suggest, it enforces the specified services or shipments to be in the same route. It can be specified as follows:\n\n```json\n{\n   \"type\": \"in_same_route\",\n   \"ids\": [\"serv_i_id\",\"serv_j_id\"]\n}\n```\n\nThis enforces service i to be in the same route as service j no matter which vehicle will be employed. If a specific vehicle (driver) is required to conduct this, just add a `vehicle_id` like this:\n\n```\n{\n   \"type\": \"in_same_route\",\n   \"ids\": [\"serv_i_id\",\"serv_j_id\"],\n   \"vehicle_id\": \"vehicle1\"\n}\n```\n\nThis not only enforce service i and j to be in the same route, but also makes sure that both services are in the route of `vehicle1`.\n\n*Tip*: This way initial loads and vehicle routes can be modelled. For example, if your vehicles are already on the road and new orders come in, then vehicles can still be rescheduled subject to the orders that have already been assigned to these vehicles.\n\n\n\n`in_sequence`: This relation type enforces n jobs to be in sequence. It can be specified as\n\n```json\n{\n   \"type\": \"in_sequence\",\n   \"ids\": [\"serv_i_id\",\"serv_j_id\"]\n}\n```\n\nwhich means that service j need to be in the same route as service i AND it needs to occur somewhere after service i. As described above if a specific vehicle needs to conduct this, just add `vehicle_id`.\n\n\n`in_direct_sequence`: This enforces n services or shipments to be in direct sequence. It can be specified as\n\n```json\n{\n   \"type\": \"in_direct_sequence\",\n   \"ids\": [\"serv_i_id\",\"serv_j_id\",\"serv_k_id\"]\n}\n```\n\nyielding service j to occur directly after service i, and service k to occur directly after service j i.e. in strong order. Again, a vehicle can be assigned a priority by adding a `vehicle_id` to the relation.\n\n\n*Special IDs*:\nIf you look at the previous example and you want service i to be the first in the route, use the special ID `start` as follows:\n\n```json\n{\n   \"type\": \"in_direct_sequence\",\n   \"ids\": [\"start\",\"serv_i_id\",\"serv_j_id\",\"serv_k_id\"]\n}\n```\n\nLatter enforces the direct sequence of i, j and k at the beginning of the route. If this sequence should be bound to the end of the route, use the special ID `end` like this:\n\n```json\n{\n   \"type\": \"in_direct_sequence\",\n   \"ids\": [\"serv_i_id\",\"service_j_id\",\"serv_k_id\",\"end\"]\n}\n```\n\nIf you deal with services then you need to use the 'id' of your services in the field 'ids'. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use the shipment id plus the keyword `_pickup` or `_delivery`. For example, to ensure that the pickup and delivery of the shipment with the id 'my_shipment' are direct neighbors, you need the following specification:\n\n```\n{\n   \"type\": \"in_direct_sequence\",\n   \"ids\": [\"my_ship_pickup\",\"my_ship_delivery\"]\n}\n```\n\n"), "vehicle_id": z.string().describe("Id of pre-assigned vehicle, i.e. the vehicle id that is determined to conduct the services and shipments in this relation.").optional() }), z.object({ "groups": z.array(z.string().describe("group of services or shipments")).describe("An array of groups that should be related"), "type": z.string().describe("Specifies the type of relation. It must be either of type `in_sequence` or `in_direct_sequence`.\n") })])).describe("Defines additional relationships between orders.").optional(), "services": z.array(z.object({ "address": z.object({ "curbside": z.enum(["right","left","any"]).describe("Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap."), "lat": z.number().describe("Latitude of location."), "location_id": z.string().describe("Specifies the id of the location."), "lon": z.number().describe("Longitude of location."), "name": z.string().describe("Name of location.").optional(), "street_hint": z.string().describe("Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.").optional() }).optional(), "allowed_vehicles": z.array(z.string()).describe("Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this service can only be conducted EITHER by `technician_peter` OR `technician_stefan` specify this as follows: `[\"technician_peter\",\"technician_stefan\"]`.").optional(), "disallowed_vehicles": z.array(z.string()).describe("Specifies an array of disallowed vehicles, i.e. array of vehicle ids.").optional(), "duration": z.number().int().gte(0).lte(604800).describe("Specifies the duration of the service in seconds, i.e. how long it takes at the customer site."), "group": z.string().describe("Group this service belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.").optional(), "id": z.string().describe("Specifies the id of the service. Ids need to be unique so there must not be two services/shipments with the same id."), "max_time_in_vehicle": z.number().int().describe("Specifies the maximum time in seconds a delivery can stay in the vehicle. Currently, it only works with services of \"type\":\"delivery\"."), "name": z.string().describe("Meaningful name for service, e.g. `\"deliver pizza\"`.").optional(), "preparation_time": z.number().int().gte(0).lte(604800).describe("Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once."), "priority": z.number().int().describe("Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution."), "required_skills": z.array(z.string()).describe("Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this service needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.").optional(), "size": z.array(z.number().int()).describe("Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5."), "time_windows": z.array(z.object({ "earliest": z.number().int().describe("Specifies the opening time of the time window in seconds, i.e. the earliest time the service can start."), "latest": z.number().int().describe("Specifies the closing time of the time window in seconds, i.e. the latest time the service can start.") })).describe("Specifies an array of time window objects (see time_window object below). Specify the time either with the recommended Unix time stamp (the number of seconds since 1970-01-01) or you can also count the seconds relative to Monday morning 00:00 and define the whole week in seconds. For example, Monday 9am is then represented by 9hour * 3600sec/hour = 32400. In turn, Wednesday 1pm corresponds to 2day * 24hour/day * 3600sec/hour + 1day * 13hour/day * 3600sec/hour = 219600. See this tutorial for more information.").optional(), "type": z.enum(["service","pickup","delivery"]).describe("Specifies type of service. This makes a difference if items are loaded or unloaded, i.e. if one of the size dimensions > 0. If it is specified as `service` or `pickup`, items are loaded and will stay in the vehicle for the rest of the route (and thus consumes capacity for the rest of the route). If it is a `delivery`, items are implicitly loaded at the beginning of the route and will stay in the route until delivery (and thus releases capacity for the rest of the route).") })).describe("Specifies the orders of the type \"service\". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location.").optional(), "shipments": z.array(z.object({ "allowed_vehicles": z.array(z.string()).describe("Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this shipment can only be conducted EITHER by \"technician_peter\" OR \"technician_stefan\" specify this as follows: [\"technician_peter\",\"technician_stefan\"].").optional(), "delivery": z.object({ "address": z.object({ "curbside": z.enum(["right","left","any"]).describe("Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap."), "lat": z.number().describe("Latitude of location."), "location_id": z.string().describe("Specifies the id of the location."), "lon": z.number().describe("Longitude of location."), "name": z.string().describe("Name of location.").optional(), "street_hint": z.string().describe("Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.").optional() }).describe("Specifies pickup or delivery address.").optional(), "duration": z.number().int().gte(0).lte(604800).describe("Specifies the duration of the pickup or delivery in seconds, e.g. how long it takes unload items at the customer site."), "group": z.string().describe("Group this stop belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.").optional(), "preparation_time": z.number().int().gte(0).lte(604800).describe("Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once."), "time_windows": z.array(z.object({ "earliest": z.number().int().describe("Specifies the opening time of the time window in seconds, i.e. the earliest time the service can start."), "latest": z.number().int().describe("Specifies the closing time of the time window in seconds, i.e. the latest time the service can start.") })).describe("Specifies an array of time window objects (see time window object below). For example, if an item needs to be delivered between 7am and 10am then specify the array as follows: [ { \"earliest\": 25200, \"latest\" : 32400 } ] (starting the day from 0 in seconds).").optional() }), "disallowed_vehicles": z.array(z.string()).describe("Specifies an array of disallowed vehicles, i.e. array of vehicle ids.").optional(), "id": z.string().describe("Specifies the id of the shipment. Ids need to be unique so there must not be two services/shipments with the same id."), "max_time_in_vehicle": z.number().int().describe("Specifies the maximum time in seconds a shipment can stay in the vehicle."), "name": z.string().describe("Meaningful name for shipment, e.g. \"pickup and deliver pizza to Peter\".").optional(), "pickup": z.object({ "address": z.object({ "curbside": z.enum(["right","left","any"]).describe("Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap."), "lat": z.number().describe("Latitude of location."), "location_id": z.string().describe("Specifies the id of the location."), "lon": z.number().describe("Longitude of location."), "name": z.string().describe("Name of location.").optional(), "street_hint": z.string().describe("Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.").optional() }).describe("Specifies pickup or delivery address.").optional(), "duration": z.number().int().gte(0).lte(604800).describe("Specifies the duration of the pickup or delivery in seconds, e.g. how long it takes unload items at the customer site."), "group": z.string().describe("Group this stop belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.").optional(), "preparation_time": z.number().int().gte(0).lte(604800).describe("Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once."), "time_windows": z.array(z.object({ "earliest": z.number().int().describe("Specifies the opening time of the time window in seconds, i.e. the earliest time the service can start."), "latest": z.number().int().describe("Specifies the closing time of the time window in seconds, i.e. the latest time the service can start.") })).describe("Specifies an array of time window objects (see time window object below). For example, if an item needs to be delivered between 7am and 10am then specify the array as follows: [ { \"earliest\": 25200, \"latest\" : 32400 } ] (starting the day from 0 in seconds).").optional() }), "priority": z.number().int().describe("Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution."), "required_skills": z.array(z.string()).describe("Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this shipment needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.").optional(), "size": z.array(z.number().int()).describe("Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.") })).describe("Specifies the available shipments. Each shipment contains a pickup and a delivery stop, which must be processed one after the other.").optional(), "vehicle_types": z.array(z.object({ "capacity": z.array(z.number().int()).describe("Specifies an array of capacity dimension values which need to be int values. For example, if there are two dimensions such as volume and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum volume of 1000 and a maximum weight of 300."), "consider_traffic": z.boolean().describe("Specifies whether traffic should be considered. if \"tomtom\" is used and this is false, free flow travel times from \"tomtom\" are calculated. If this is true, historical traffic info are used. We do not yet have traffic data for \"openstreetmap\", thus, setting this true has no effect at all."), "cost_per_activation": z.number().describe("**_BETA feature_**! Cost parameter vehicle activation, i.e. fixed costs per vehicle").optional(), "cost_per_meter": z.number().describe("**_BETA feature_**! Cost parameter per distance unit, here meter is used").optional(), "cost_per_second": z.number().describe("**_BETA feature_**! Cost parameter per time unit, here second is used").optional(), "network_data_provider": z.enum(["openstreetmap","tomtom"]).describe("Specifies the network data provider. Either use [`openstreetmap`](#section/Map-Data-and-Routing-Profiles/OpenStreetMap) (default) or [`tomtom`](#section/Map-Data-and-Routing-Profiles/TomTom) (add-on required)."), "profile": z.string().optional(), "service_time_factor": z.number().describe("Specifies a service time factor for this vehicle type. If the vehicle/driver that uses this type is able to conduct the service as double as fast as it is determined in the corresponding service or shipment then set it to 0.5."), "speed_factor": z.number().describe("Specifies a speed factor for this vehicle type. If the vehicle that uses this type needs to be only half as fast as what is actually calculated with our routing engine then set the speed factor to 0.5."), "type_id": z.string().describe("Specifies the id of the vehicle type. If a vehicle needs to be of this type, it should refer to this with its type_id attribute.") })).describe("Specifies the available vehicle types. These types can be assigned to vehicles.").optional(), "vehicles": z.array(z.object({ "break": z.union([z.object({ "duration": z.number().int().describe("Specifies the duration of the break in seconds."), "earliest": z.number().int().describe("Specifies the earliest start time of the break in seconds."), "latest": z.number().int().describe("Specifies the latest start time of break in seconds.") }), z.object({ "duration": z.number().int().describe("Specifies the duration of the break in seconds."), "initial_driving_time": z.number().int().describe("Specifies the initial (current) driving time of a driver to allow dynamic adaptations in seconds.").optional(), "max_driving_time": z.number().int().describe("Specifies the max driving time (in a row) without break in seconds."), "possible_split": z.array(z.number().int()).describe("Array specifying how a break duration (in seconds) can be split into several smaller breaks").optional() })]).optional(), "earliest_start": z.number().int().describe("Earliest start of vehicle in seconds. It is recommended to use the unix timestamp."), "end_address": z.object({ "curbside": z.enum(["right","left","any"]).describe("Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap."), "lat": z.number().describe("Latitude of location."), "location_id": z.string().describe("Specifies the id of the location."), "lon": z.number().describe("Longitude of location."), "name": z.string().describe("Name of location.").optional(), "street_hint": z.string().describe("Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.").optional() }).describe("If this is omitted AND return_to_depot is true then the vehicle needs to return to its start_address.").optional(), "latest_end": z.number().int().describe("Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest."), "max_activities": z.number().int().describe("Specifies the maximum number of activities a vehicle can conduct.").optional(), "max_distance": z.number().int().describe("Specifies the maximum distance (in meters) a vehicle can go.").optional(), "max_driving_time": z.number().int().describe("Specifies the maximum drive time (in seconds) a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here)").optional(), "max_jobs": z.number().int().describe("Specifies the maximum number of jobs a vehicle can load.").optional(), "min_jobs": z.number().int().describe("Specifies the minimum number of jobs a vehicle should load. This is a soft constraint, i.e. if it is not possible to fulfill “min_jobs”, we will still try to get as close as possible to this constraint.").optional(), "move_to_end_address": z.boolean().describe("Indicates whether a vehicle should be moved even though it has not been assigned any jobs.").optional(), "return_to_depot": z.boolean().describe("If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers' locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location."), "skills": z.array(z.string()).describe("Array of skills, i.e. array of string (not case sensitive).").optional(), "start_address": z.object({ "curbside": z.enum(["right","left","any"]).describe("Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap."), "lat": z.number().describe("Latitude of location."), "location_id": z.string().describe("Specifies the id of the location."), "lon": z.number().describe("Longitude of location."), "name": z.string().describe("Name of location.").optional(), "street_hint": z.string().describe("Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.").optional() }), "type_id": z.string().describe("The type ID assigns a vehicle type to this vehicle. You can specify types in the array of vehicle types. If you omit the type ID, the default type is used. The default type is a `car` with a capacity of 0."), "vehicle_id": z.string().describe("Specifies the ID of the vehicle. Ids must be unique, i.e. if there are two vehicles with the same ID, an error is returned.") })).min(1).describe("Specifies the available vehicles.").optional() }).optional() }).shape