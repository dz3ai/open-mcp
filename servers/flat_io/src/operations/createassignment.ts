import { z } from "zod"

export const toolName = `createassignment`
export const toolDescription = `Assignment creation`
export const baseUrl = `https://api.flat.io/v2`
export const path = `/classes/{class}/assignments`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>OAUTH2_TOKEN</mcp-env-var>",
    "in": "header",
    "envVarName": "OAUTH2_TOKEN",
    "schemeType": "oauth2"
  }
]

export const inputParams = z.object({ "body": z.object({ "assignedStudents": z.array(z.string()).describe("Identifiers for the students that have access to the assignment").optional(), "assigneeMode": z.enum(["everyone","selected"]).describe("Possible modes of assigning assignments").optional(), "attachments": z.array(z.object({ "googleDriveFileId": z.string().describe("The ID of the Google Drive File").optional(), "lockScoreTemplate": z.boolean().describe("To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.").optional(), "score": z.string().describe("A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the\nteachers and students of the class.\n").optional(), "sharingMode": z.enum(["read","write","copy","performance"]).describe("The sharing mode of the score for classes post and assignments"), "type": z.enum(["flat","link","googleDrive","worksheet"]).describe("The type of the attachment posted").optional(), "url": z.string().describe("The URL of the attachment.").optional(), "worksheet": z.string().describe("An unique worksheet identifier").optional() }).describe("Attachment creation for an assignment or stream post.\nThis attachment must contain a `score` or an `url`, all the details of this one will be resolved and returned as `ClassAttachment` once the assignment or stream post is created.\n")).optional(), "cover": z.string().nullable().describe("The URL of the cover to display").optional(), "coverFile": z.string().nullable().describe("The id of the cover to display").optional(), "description": z.string().describe("Description and content of the assignment").optional(), "dueDate": z.string().datetime({ offset: true }).nullable().describe("The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date.\n").optional(), "googleClassroom": z.object({ "topicId": z.string().nullable().describe("Identifier of the topic where the assignment is created").optional() }).describe("Google Classroom options for this assignment").optional(), "maxPoints": z.number().gte(0).lte(100).nullable().describe("If set, the grading will be enabled for the assignement with this value as the maximum of points\n").optional(), "microsoftGraph": z.object({ "categories": z.array(z.string()).nullable().describe("List of categories this assignment belongs to").optional() }).describe("Microsoft Graph options for this assignment").optional(), "nbPlaybackAuthorized": z.number().nullable().describe("The number of playback authorized on the scores of the assignment.").optional(), "scheduledDate": z.string().datetime({ offset: true }).nullable().describe("The publication (scheduled) date of the assignment.\nIf this one is specified, the assignment will only be listed to the teachers of the class.\n").optional(), "state": z.enum(["draft","active"]).describe("State of the assignment").optional(), "title": z.string().describe("Title of the assignment").optional(), "toolset": z.string().nullable().describe("The id of the associated toolset").optional(), "type": z.enum(["none","newScore","scoreTemplate","sharedWriting","worksheet","performance"]).describe("Type of the assignment").optional() }).describe("Assignment creation details").optional() }).shape