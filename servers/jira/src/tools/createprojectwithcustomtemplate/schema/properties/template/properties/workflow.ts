import { z } from "zod"

export const inputParamsSchema = {
  "statuses": z.array(z.object({ "description": z.string().describe("The description of the status").optional(), "name": z.string().describe("The name of the status").optional(), "onConflict": z.enum(["FAIL","USE","NEW"]).describe("The conflict strategy for the status already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters; NEW - Create a new entity").optional(), "pcri": z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation").optional(), "statusCategory": z.enum(["TODO","IN_PROGRESS","DONE"]).describe("The status category of the status. The value is case-sensitive.").optional() }).strict().describe("The payload for creating a status")).describe("The statuses for the workflow").optional(),
  "workflowScheme": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `workflowScheme` to the tool, first call the tool `expandSchema` with \"/properties/template/properties/workflow/properties/workflowScheme\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The payload for creating a workflow scheme. See https://www.atlassian.com/software/jira/guides/workflows/overview\\#what-is-a-jira-workflow-scheme</property-description>").optional(),
  "workflows": z.array(z.object({ "description": z.string().describe("The description of the workflow").optional(), "loopedTransitionContainerLayout": z.object({ "x": z.number().describe("The x coordinate of the status.").optional(), "y": z.number().describe("The y coordinate of the status.").optional() }).strict().describe("The layout of the workflow status.").optional(), "name": z.string().describe("The name of the workflow").optional(), "pcri": z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation").optional(), "startPointLayout": z.object({ "x": z.number().describe("The x coordinate of the status.").optional(), "y": z.number().describe("The y coordinate of the status.").optional() }).strict().describe("The layout of the workflow status.").optional(), "statuses": z.array(z.object({ "layout": z.object({ "x": z.number().describe("The x coordinate of the status.").optional(), "y": z.number().describe("The y coordinate of the status.").optional() }).strict().describe("The layout of the workflow status.").optional(), "pcri": z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation").optional(), "properties": z.record(z.string().describe("The properties of the workflow status.")).describe("The properties of the workflow status.").optional() }).strict().describe("The statuses to be used in the workflow")).describe("The statuses to be used in the workflow").optional(), "transitions": z.array(z.object({ "actions": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The actions that are performed when the transition is made").optional(), "conditions": z.object({ "conditionGroup": z.array(z.object({ "conditionGroup": z.array(z.object({ "conditionGroup": z.array(z.object({ "conditionGroup": z.array(z.object({ "conditionGroup": z.array(z.object({ "conditionGroup": z.array(z.string()).describe("The nested conditions of the condition group.").optional(), "conditions": z.array(z.string()).describe("The rules for this condition.").optional(), "operation": z.enum(["ANY","ALL"]).describe("Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.").optional() }).strict().describe("The payload for creating a condition group in a workflow")).describe("The nested conditions of the condition group.").optional(), "conditions": z.array(z.object({ "parameters": z.record(z.string()).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The rules for this condition.").optional(), "operation": z.enum(["ANY","ALL"]).describe("Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.").optional() }).strict().describe("The payload for creating a condition group in a workflow")).describe("The nested conditions of the condition group.").optional(), "conditions": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The rules for this condition.").optional(), "operation": z.enum(["ANY","ALL"]).describe("Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.").optional() }).strict().describe("The payload for creating a condition group in a workflow")).describe("The nested conditions of the condition group.").optional(), "conditions": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The rules for this condition.").optional(), "operation": z.enum(["ANY","ALL"]).describe("Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.").optional() }).strict().describe("The payload for creating a condition group in a workflow")).describe("The nested conditions of the condition group.").optional(), "conditions": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The rules for this condition.").optional(), "operation": z.enum(["ANY","ALL"]).describe("Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.").optional() }).strict().describe("The payload for creating a condition group in a workflow")).describe("The nested conditions of the condition group.").optional(), "conditions": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The rules for this condition.").optional(), "operation": z.enum(["ANY","ALL"]).describe("Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.").optional() }).strict().describe("The payload for creating a condition group in a workflow").optional(), "customIssueEventId": z.string().describe("Mechanism in Jira for triggering certain actions, like notifications, automations, etc. Unless a custom notification scheme is configure, it's better not to provide any value here").optional(), "description": z.string().describe("The description of the transition").optional(), "from": z.array(z.object({ "fromPort": z.number().int().describe("The port that the transition can be made from").optional(), "status": z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation").optional(), "toPortOverride": z.number().int().describe("The port that the transition goes to").optional() }).strict().describe("The payload for the layout details for the start end of a transition")).describe("The statuses that the transition can be made from").optional(), "id": z.number().int().describe("The id of the transition").optional(), "name": z.string().describe("The name of the transition").optional(), "properties": z.record(z.string().describe("The properties of the transition")).describe("The properties of the transition").optional(), "to": z.object({ "port": z.number().int().describe("Defines where the transition line will be connected to a status. Port 0 to 7 are acceptable values.").optional(), "status": z.object({ "anID": z.boolean().optional(), "areference": z.boolean().optional(), "entityId": z.string().optional(), "entityType": z.string().optional(), "id": z.string().optional(), "type": z.enum(["id","ref"]).optional() }).strict().describe("Every project-created entity has an ID that must be unique within the scope of the project creation. PCRI (Project Create Resource Identifier) is a standard format for creating IDs and references to other project entities. PCRI format is defined as follows: pcri:\\[entityType\\]:\\[type\\]:\\[entityId\\] entityType - the type of an entity, e.g. status, role, workflow type - PCRI type, either `id` - The ID of an entity that already exists in the target site, or `ref` - A unique reference to an entity that is being created entityId - entity identifier, if type is `id` - must be an existing entity ID that exists in the Jira site, if `ref` - must be unique across all entities in the scope of this project template creation").optional() }).strict().describe("The payload for the layout details for the destination end of a transition").optional(), "transitionScreen": z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow").optional(), "triggers": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The triggers that are performed when the transition is made").optional(), "type": z.enum(["global","initial","directed"]).describe("The type of the transition").optional(), "validators": z.array(z.object({ "parameters": z.record(z.string().describe("The parameters of the rule")).describe("The parameters of the rule").optional(), "ruleKey": z.string().describe("The key of the rule. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-capabilities-get").optional() }).strict().describe("The payload for creating rules in a workflow")).describe("The validators that are performed when the transition is made").optional() }).strict().describe("The payload for creating a transition in a workflow. Can be DIRECTED, GLOBAL, SELF-LOOPED, GLOBAL LOOPED")).describe("The transitions for the workflow").optional() }).strict().describe("The payload for creating workflow, see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/\\#api-rest-api-3-workflows-create-post")).describe("The transitions for the workflow").optional()
}