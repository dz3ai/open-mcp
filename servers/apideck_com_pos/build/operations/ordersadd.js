import { z } from "zod";
export const toolName = `ordersadd`;
export const toolDescription = `Create Order`;
export const baseUrl = `https://unify.apideck.com`;
export const path = `/pos/orders`;
export const method = `post`;
export const security = [
    {
        "key": "Authorization",
        "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
        "in": "header",
        "envVarName": "AUTHORIZATION",
        "schemeType": "apiKey",
        "schemeName": "Authorization"
    }
];
export const inputParams = z.object({ "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "body": z.object({ "closed_date": z.string().date().nullable().optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "currency": z.enum(["UNKNOWN_CURRENCY", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRC", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XTS", "XXX", "YER", "ZAR", "ZMK", "ZMW", "BTC", "ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "customer_id": z.string().optional(), "customers": z.array(z.object({ "emails": z.array(z.object({ "email": z.string().email().min(1), "id": z.string().optional(), "type": z.enum(["primary", "secondary", "work", "personal", "billing", "other"]).optional() }).strict()).optional(), "first_name": z.string().nullable().optional(), "id": z.string().optional(), "last_name": z.string().nullable().optional(), "middle_name": z.string().nullable().optional(), "phone_numbers": z.array(z.object({ "area_code": z.string().nullable().optional(), "country_code": z.string().nullable().optional(), "extension": z.string().nullable().optional(), "id": z.string().nullable().optional(), "number": z.string().min(1), "type": z.enum(["primary", "secondary", "home", "work", "office", "mobile", "assistant", "fax", "direct-dial-in", "personal", "other"]).optional() }).strict()).optional() })).optional(), "discounts": z.array(z.object({ "amount": z.number().int().optional(), "currency": z.enum(["UNKNOWN_CURRENCY", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRC", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XTS", "XXX", "YER", "ZAR", "ZMK", "ZMW", "BTC", "ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "name": z.string().optional(), "product_id": z.string().describe("A unique identifier for an object.").readonly().optional(), "scope": z.enum(["order", "line_item"]).optional(), "type": z.enum(["percentage", "flat_fee"]).optional() })).optional(), "employee_id": z.string().optional(), "fulfillments": z.array(z.object({ "id": z.string().optional(), "pickup_details": z.object({ "accepted_at": z.string().datetime({ offset: true }).nullable().readonly().optional(), "auto_complete_duration": z.string().nullable().describe("The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').").optional(), "cancel_reason": z.string().nullable().describe("A description of why the pickup was canceled.").optional(), "canceled_at": z.string().datetime({ offset: true }).describe("Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "curbside_pickup_details": z.object({ "buyer_arrived_at": z.string().datetime({ offset: true }).describe("Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "curbside_details": z.string().max(250).describe("Specific details for curbside pickup, such as parking number and vehicle model.").optional() }).describe("Specific details for curbside pickup.").optional(), "expired_at": z.string().datetime({ offset: true }).describe("Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "expires_at": z.string().datetime({ offset: true }).describe("Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\"). The expiration time can only be set up to 7 days in the future.\nIf `expires_at` is not set, this pickup fulfillment is automatically accepted when \nplaced.").optional(), "is_curbside_pickup": z.boolean().describe("If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.").optional(), "note": z.string().describe("A note meant to provide additional instructions about the pickup\nfulfillment displayed in the Square Point of Sale application and set by the API.").optional(), "picked_up_at": z.string().datetime({ offset: true }).describe("Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "pickup_at": z.string().datetime({ offset: true }).describe("The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., \n\"2016-09-04T23:59:33.123Z\".\n\nFor fulfillments with the schedule type `ASAP`, this is automatically set\nto the current time plus the expected duration to prepare the fulfillment.").optional(), "pickup_window_duration": z.string().describe("The window of time in which the order should be picked up after the `pickup_at` timestamp.\nMust be in RFC 3339 duration format, e.g., \"P1W3D\". Can be used as an\ninformational guideline for merchants.").optional(), "placed_at": z.string().datetime({ offset: true }).describe("Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "prep_time_duration": z.string().describe("The duration of time it takes to prepare this fulfillment.\nThe duration must be in RFC 3339 format (for example, \"P1W3D\").").optional(), "ready_at": z.string().datetime({ offset: true }).describe("Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "recipient": z.object({ "address": z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary", "secondary", "home", "office", "shipping", "billing", "other"]).optional(), "website": z.string().nullable().optional() }).strict().optional(), "customer_id": z.string().optional(), "display_name": z.string().optional(), "email": z.object({ "email": z.string().email().min(1), "id": z.string().optional(), "type": z.enum(["primary", "secondary", "work", "personal", "billing", "other"]).optional() }).strict().optional(), "phone_number": z.object({ "area_code": z.string().nullable().optional(), "country_code": z.string().nullable().optional(), "extension": z.string().nullable().optional(), "id": z.string().nullable().optional(), "number": z.string().min(1), "type": z.enum(["primary", "secondary", "home", "work", "office", "mobile", "assistant", "fax", "direct-dial-in", "personal", "other"]).optional() }).strict().optional() }).optional(), "rejected_at": z.string().datetime({ offset: true }).describe("Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format\n(for example, \"2016-09-04T23:59:33.123Z\").").optional(), "schedule_type": z.literal("scheduled").describe("The schedule type of the pickup fulfillment.").optional() }).optional(), "shipment_details": z.object({}).optional(), "status": z.enum(["proposed", "reserved", "prepared", "completed", "cancelled", "failed", "other"]).describe("The state of the fulfillment.").optional(), "type": z.enum(["pickup", "shipment"]).optional() })).optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "idempotency_key": z.string().max(45).describe("A value you specify that uniquely identifies this request among requests you have sent.").optional(), "line_items": z.array(z.object({ "applied_discounts": z.array(z.any()).optional(), "applied_taxes": z.array(z.any()).optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "item": z.any().optional(), "modifiers": z.array(z.any()).describe("Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts").optional(), "name": z.string().optional(), "quantity": z.number().nullable().optional(), "total_amount": z.number().int().nullable().optional(), "total_discount": z.number().int().nullable().optional(), "total_tax": z.number().int().nullable().optional(), "unit_price": z.number().nullable().optional() })).optional(), "location_id": z.string(), "merchant_id": z.string(), "note": z.string().describe("A note with information about this order, may be printed on the order receipt and displayed in apps").optional(), "order_date": z.string().date().nullable().optional(), "order_number": z.string().optional(), "order_type_id": z.string().optional(), "payment_status": z.enum(["open", "paid", "refunded", "credited", "partially_paid", "partially_refunded", "unknown"]).describe("Is this order paid or not?").optional(), "payments": z.array(z.object({ "amount": z.number().int().optional(), "currency": z.enum(["UNKNOWN_CURRENCY", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRC", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XTS", "XXX", "YER", "ZAR", "ZMK", "ZMW", "BTC", "ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional() })).optional(), "reference_id": z.string().nullable().describe("An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.").optional(), "refunded": z.boolean().optional(), "refunds": z.array(z.object({ "amount": z.number().int().optional(), "currency": z.enum(["UNKNOWN_CURRENCY", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRC", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XTS", "XXX", "YER", "ZAR", "ZMK", "ZMW", "BTC", "ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "location_id": z.string().describe("A unique identifier for an object.").readonly().optional(), "reason": z.string().optional(), "status": z.enum(["pending", "approved", "rejected", "failed"]).optional(), "tender_id": z.string().describe("A unique identifier for an object.").readonly().optional(), "transaction_id": z.string().describe("A unique identifier for an object.").readonly().optional() })).optional(), "seat": z.string().optional(), "service_charges": z.array(z.object({ "active": z.boolean().nullable().optional(), "amount": z.number().optional(), "currency": z.enum(["UNKNOWN_CURRENCY", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRC", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XTS", "XXX", "YER", "ZAR", "ZMK", "ZMW", "BTC", "ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "name": z.string().describe("Service charge name").optional(), "percentage": z.number().describe("Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.").optional(), "type": z.enum(["auto_gratuity", "custom"]).describe("The type of the service charge.").optional() })).describe("Optional service charges or gratuity tip applied to the order.").optional(), "source": z.enum(["in-store", "online", "opt", "api", "kiosk", "caller-id", "google", "invoice"]).nullable().describe("Source of order. Indicates the way that the order was placed.").readonly().optional(), "status": z.enum(["open", "draft", "delivered", "delayed", "voided", "completed", "hidden"]).describe("Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()").optional(), "table": z.string().optional(), "taxes": z.array(z.any()).optional(), "tenders": z.array(z.object({ "amount": z.number().optional(), "buyer_tendered_cash_amount": z.number().int().nullable().describe("The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.").optional(), "card": z.object({ "billing_address": z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary", "secondary", "home", "office", "shipping", "billing", "other"]).optional(), "website": z.string().nullable().optional() }).strict().optional(), "bin": z.string().nullable().describe("The first six digits of the card number, known as the Bank Identification Number (BIN).").optional(), "card_brand": z.enum(["visa", "mastercard", "amex", "discover", "discover-diners", "jcb", "china-unionpay", "square-gift-card", "square-capital-card", "interac", "eftpos", "felica", "ebt", "other"]).nullable().describe("The first six digits of the card number, known as the Bank Identification Number (BIN).").optional(), "card_type": z.enum(["credit", "debit", "prepaid", "other"]).nullable().optional(), "cardholder_name": z.string().nullable().optional(), "customer_id": z.string().nullable().optional(), "enabled": z.boolean().nullable().describe("Indicates whether or not a card can be used for payments.").optional(), "exp_month": z.number().int().gte(1).lte(12).nullable().describe("The expiration month of the associated card as an integer between 1 and 12.").optional(), "exp_year": z.number().int().nullable().describe("The four-digit year of the card's expiration date.").optional(), "fingerprint": z.string().nullable().optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "last_4": z.string().nullable().optional(), "merchant_id": z.string().optional(), "prepaid_type": z.enum(["non-prepaid", "prepaid", "unknown"]).nullable().optional(), "reference_id": z.string().nullable().describe("An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.").optional(), "version": z.string().nullable().optional() }).strict().nullable().describe("A card's non-confidential details.").optional(), "card_entry_method": z.enum(["evm", "swiped", "keyed", "on-file", "contactless"]).nullable().describe("The entry method of the card. Only applicable when the tender type is card.").optional(), "card_status": z.enum(["authorized", "captured", "failed", "voided"]).nullable().describe("The status of the card. Only applicable when the tender type is card.").optional(), "change_back_cash_amount": z.number().int().nullable().describe("The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.").optional(), "currency": z.enum(["UNKNOWN_CURRENCY", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRC", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XTS", "XXX", "YER", "ZAR", "ZMK", "ZMW", "BTC", "ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "location_id": z.string().describe("A unique identifier for an object.").readonly().optional(), "name": z.string().optional(), "note": z.string().optional(), "payment_id": z.string().describe("A unique identifier for an object.").readonly().optional(), "percentage": z.number().optional(), "total_amount": z.number().int().nullable().optional(), "total_discount": z.number().int().nullable().optional(), "total_processing_fee": z.number().int().nullable().optional(), "total_refund": z.number().int().nullable().optional(), "total_service_charge": z.number().int().nullable().optional(), "total_tax": z.number().int().nullable().optional(), "total_tip": z.number().int().nullable().optional(), "transaction_id": z.string().describe("A unique identifier for an object.").readonly().optional(), "type": z.enum(["cash", "card", "other"]).optional() })).optional(), "title": z.string().optional(), "total_amount": z.number().int().nullable().optional(), "total_discount": z.number().int().nullable().optional(), "total_refund": z.number().int().nullable().optional(), "total_service_charge": z.number().int().nullable().optional(), "total_tax": z.number().int().nullable().optional(), "total_tip": z.number().int().nullable().optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional(), "version": z.string().nullable().optional(), "voided": z.boolean().optional(), "voided_at": z.string().datetime({ offset: true }).readonly().optional() }).strict().optional() }).shape;
