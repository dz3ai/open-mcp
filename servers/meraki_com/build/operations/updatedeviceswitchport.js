import { z } from "zod";
export const toolName = `updatedeviceswitchport`;
export const toolDescription = `Update a switch port`;
export const baseUrl = `https://api.meraki.com/api/v1`;
export const path = `/devices/{serial}/switch/ports/{portId}`;
export const method = `put`;
export const security = [
    {
        "key": "X-Cisco-Meraki-API-Key",
        "value": "<mcp-env-var>X_CISCO_MERAKI_API_KEY</mcp-env-var>",
        "in": "header",
        "envVarName": "X_CISCO_MERAKI_API_KEY",
        "schemeType": "apiKey",
        "schemeName": "X-Cisco-Meraki-API-Key"
    }
];
export const inputParams = z.object({ "path": z.object({ "serial": z.string(), "portId": z.string() }).optional(), "body": z.object({ "accessPolicyNumber": z.number().int().describe("The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.").optional(), "accessPolicyType": z.enum(["Custom access policy", "MAC allow list", "Open", "Sticky MAC allow list"]).describe("The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.").optional(), "adaptivePolicyGroupId": z.string().describe("The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.").optional(), "allowedVlans": z.string().describe("The VLANs allowed on the switch port. Only applicable to trunk ports.").optional(), "daiTrusted": z.boolean().describe("If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.").optional(), "enabled": z.boolean().describe("The status of the switch port.").optional(), "flexibleStackingEnabled": z.boolean().describe("For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.").optional(), "isolationEnabled": z.boolean().describe("The isolation status of the switch port.").optional(), "linkNegotiation": z.string().describe("The link speed for the switch port.").optional(), "macAllowList": z.array(z.string()).describe("Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.").optional(), "name": z.string().describe("The name of the switch port.").optional(), "peerSgtCapable": z.boolean().describe("If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.").optional(), "poeEnabled": z.boolean().describe("The PoE status of the switch port.").optional(), "portScheduleId": z.string().describe("The ID of the port schedule. A value of null will clear the port schedule.").optional(), "profile": z.object({ "enabled": z.boolean().describe("When enabled, override this port's configuration with a port profile.").optional(), "id": z.string().describe("When enabled, the ID of the port profile used to override the port's configuration.").optional(), "iname": z.string().describe("When enabled, the IName of the profile.").optional() }).describe("Profile attributes").optional(), "rstpEnabled": z.boolean().describe("The rapid spanning tree protocol status.").optional(), "stickyMacAllowList": z.array(z.string()).describe("The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.").optional(), "stickyMacAllowListLimit": z.number().int().describe("The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.").optional(), "stormControlEnabled": z.boolean().describe("The storm control status of the switch port.").optional(), "stpGuard": z.enum(["bpdu guard", "disabled", "loop guard", "root guard"]).describe("The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').").optional(), "tags": z.array(z.string()).describe("The list of tags of the switch port.").optional(), "type": z.enum(["access", "trunk"]).describe("The type of the switch port ('trunk' or 'access').").optional(), "udld": z.enum(["Alert only", "Enforce"]).describe("The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.").optional(), "vlan": z.number().int().describe("The VLAN of the switch port. A null value will clear the value set for trunk ports.").optional(), "voiceVlan": z.number().int().describe("The voice VLAN of the switch port. Only applicable to access ports.").optional() }).optional() }).shape;
