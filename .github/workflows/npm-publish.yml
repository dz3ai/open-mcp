name: Publish packages to npm

on:
  push:
    branches:
      - main

jobs:
  detect-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # This fetches all history for change detection

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Detect changed packages
        id: changed-packages
        run: |
          echo "::group::Detecting changed directories"
          # Get the list of directories that have changed since the last commit to main
          CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD | grep "^servers/" | cut -d/ -f2 | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Changed directories: $CHANGED_DIRS"
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "::group::Detecting removed directories"
          # Get the list of directories that have had their README.md removed
          REMOVED_DIRS=$(git diff --diff-filter=D --name-only HEAD^ HEAD | grep "^servers/.*/README.md" | cut -d/ -f2 | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Removed directories: $REMOVED_DIRS"
          echo "removed_dirs=$REMOVED_DIRS" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Configure Git
        run: |
          echo "::group::Configuring Git"
          set -x
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          set +x
          echo "::endgroup::"

      - name: Process changed packages and commit version changes
        run: |
          echo "::group::Preparing arrays for processing"
          # Convert the JSON lists to arrays
          CHANGED_DIRS_JSON='${{ steps.changed-packages.outputs.changed_dirs }}'
          REMOVED_DIRS_JSON='${{ steps.changed-packages.outputs.removed_dirs }}'

          # Convert JSON arrays to Bash arrays
          readarray -t CHANGED_DIRS_ARRAY < <(echo "$CHANGED_DIRS_JSON" | jq -r '.[]')
          readarray -t REMOVED_DIRS_ARRAY < <(echo "$REMOVED_DIRS_JSON" | jq -r '.[]')

          echo "Changed directories array: ${CHANGED_DIRS_ARRAY[@]}"
          echo "Removed directories array: ${REMOVED_DIRS_ARRAY[@]}"
          echo "::endgroup::"

          # Process each removed package for deprecation
          for dir in "${REMOVED_DIRS_ARRAY[@]}"; do
            echo "::group::Checking removed package: $dir"
            PACKAGE_JSON=$(git show HEAD^:servers/$dir/package.json 2>/dev/null || echo "Not found")
            echo "Previous package.json found: $([[ "$PACKAGE_JSON" != "Not found" ]] && echo "Yes" || echo "No")"
            
            if [[ "$PACKAGE_JSON" != "Not found" ]]; then
              PACKAGE_NAME=$(echo "$PACKAGE_JSON" | grep -o '"name": "[^"]*"' | head -1 | cut -d'"' -f4)
              echo "Found package name: $PACKAGE_NAME"
              
              if [ ! -z "$PACKAGE_NAME" ]; then
                echo "Deprecating removed package: $PACKAGE_NAME"
                npm deprecate $PACKAGE_NAME "This package has been removed from the repository and is no longer maintained." || echo "Deprecation attempt failed"
              else
                echo "No valid package name found in removed directory"
              fi
            else
              echo "Could not find previous package.json for $dir"
            fi
            echo "::endgroup::"
          done

          # Array to track successful packages
          declare -a SUCCESSFUL_PACKAGES=()

          # Process each changed package
          for dir in "${CHANGED_DIRS_ARRAY[@]}"; do
            echo "::group::Processing package: $dir"
            if [ -d "servers/$dir" ] && [ -f "servers/$dir/package.json" ]; then
              echo "Processing $dir"
              
              # Navigate to package directory
              cd "servers/$dir" || continue
              
              # Track if all steps succeed
              PACKAGE_SUCCESS=true
              
              # # Install dependencies
              # echo "Installing dependencies for $dir"
              # if [ -f "package-lock.json" ]; then
              #   if ! npm ci; then
              #     echo "Failed to install dependencies for $dir"
              #     PACKAGE_SUCCESS=false
              #   fi
              # else
              #   if ! npm install; then
              #     echo "Failed to install dependencies for $dir"
              #     PACKAGE_SUCCESS=false
              #   fi
              # fi
              
              # # Only continue if install succeeded
              # if [ "$PACKAGE_SUCCESS" = true ]; then
              #   # Run tests
              #   echo "Running tests for $dir"
              #   if ! npm test; then
              #     echo "Tests failed for $dir"
              #     PACKAGE_SUCCESS=false
              #   fi
              # fi
              
              # # Only continue if tests succeeded
              # if [ "$PACKAGE_SUCCESS" = true ]; then
              #   # Build package
              #   echo "Building $dir"
              #   if ! npm run build; then
              #     echo "Build failed for $dir"
              #     PACKAGE_SUCCESS=false
              #   fi
              # fi
              
              # If all steps succeeded, prepare for publishing
              if [ "$PACKAGE_SUCCESS" = true ]; then
                echo "All checks passed for $dir"
                
                # Determine version bump from commit message
                if [[ "${{ github.event.head_commit.message }}" == *"#major $dir"* ]]; then
                  BUMP="major"
                elif [[ "${{ github.event.head_commit.message }}" == *"#minor $dir"* ]]; then
                  BUMP="minor"
                else
                  BUMP="patch"
                fi
                
                # Update version
                npm version $(npm view . version) --allow-same-version
                npm version $BUMP -m "Bump $dir version to %s [skip ci]"
                
                # Publish
                if npm publish --access public; then
                  echo "Successfully published $dir"
                  SUCCESSFUL_PACKAGES+=("$dir")
                else
                  echo "Failed to publish $dir"
                  PACKAGE_SUCCESS=false
                fi
              else
                echo "Skipping version bump and publish for $dir due to previous failures"
              fi
              
              # Return to root directory
              cd ../../
            else
              echo "Package directory or package.json not found for $dir"
            fi
            echo "::endgroup::"
          done

          # Track unsuccessful packages
          UNSUCCESSFUL_PACKAGES=()
          for dir in "${CHANGED_DIRS_ARRAY[@]}"; do
            if [[ ! " ${SUCCESSFUL_PACKAGES[@]} " =~ " ${dir} " ]]; then
              UNSUCCESSFUL_PACKAGES+=("$dir")
            fi
          done

          if [ ${#UNSUCCESSFUL_PACKAGES[@]} -gt 0 ]; then
            echo "Failed to process packages: ${UNSUCCESSFUL_PACKAGES[*]}"
          fi

          # Only commit version changes if at least one package was successful
          if [ ${#SUCCESSFUL_PACKAGES[@]} -gt 0 ]; then
            echo "::group::Committing version changes"
            echo "Successfully processed packages: ${SUCCESSFUL_PACKAGES[*]}"
            git add .

            for dir in "${UNSUCCESSFUL_PACKAGES[@]}"; do
              echo "Unstaging unsuccessful package: $dir"
              git restore --staged "servers/$dir"
            done

            git commit -m "chore: update package versions [skip ci]" || echo "No changes to commit"
            git push origin main || echo "Push failed"
            echo "::endgroup::"
          else
            echo "No packages were successfully processed - skipping git commit"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
