{
  "type": "object",
  "properties": {
    "dashboardName": {
      "description": "String used to perform a case-insensitive partial match with `name`.",
      "type": "string"
    },
    "accountId": {
      "description": "User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.",
      "maxLength": 128,
      "type": "string"
    },
    "owner": {
      "description": "This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.",
      "type": "string"
    },
    "groupname": {
      "description": "As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.",
      "type": "string"
    },
    "groupId": {
      "description": "Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.",
      "type": "string"
    },
    "projectId": {
      "description": "Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.",
      "format": "int64",
      "type": "integer"
    },
    "orderBy": {
      "description": "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard owner name.",
      "default": "name",
      "enum": [
        "description",
        "-description",
        "+description",
        "favorite_count",
        "-favorite_count",
        "+favorite_count",
        "id",
        "-id",
        "+id",
        "is_favorite",
        "-is_favorite",
        "+is_favorite",
        "name",
        "-name",
        "+name",
        "owner",
        "-owner",
        "+owner"
      ],
      "type": "string"
    },
    "startAt": {
      "description": "The index of the first item to return in a page of results (page offset).",
      "default": 0,
      "format": "int64",
      "type": "integer"
    },
    "maxResults": {
      "description": "The maximum number of items to return per page.",
      "default": 50,
      "format": "int32",
      "type": "integer"
    },
    "status": {
      "description": "The status to filter by. It may be active, archived or deleted.",
      "default": "active",
      "enum": [
        "active",
        "archived",
        "deleted"
      ],
      "type": "string"
    },
    "expand": {
      "description": "Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl` Returns the URL that is used to view the dashboard.\n *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.\n *  `sharePermissions` Returns details of the share permissions defined for the dashboard.\n *  `editPermissions` Returns details of the edit permissions defined for the dashboard.\n *  `isWritable` Returns whether the current user has permission to edit the dashboard.",
      "type": "string"
    }
  },
  "required": []
}