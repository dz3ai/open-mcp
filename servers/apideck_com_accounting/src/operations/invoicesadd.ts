import { z } from "zod"

export const toolName = `invoicesadd`
export const toolDescription = `Create Invoice`
export const baseUrl = `https://unify.apideck.com`
export const path = `/accounting/invoices`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
    "in": "header",
    "envVarName": "AUTHORIZATION",
    "schemeType": "apiKey",
    "schemeName": "Authorization"
  }
]

export const inputParams = z.object({ "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "body": z.object({ "balance": z.number().nullable().describe("Balance of invoice due.").optional(), "billing_address": z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary","secondary","home","office","shipping","billing","other"]).optional(), "website": z.string().nullable().optional() }).strict().optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "currency": z.enum(["UNKNOWN_CURRENCY","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRC","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","USS","UYI","UYU","UZS","VEF","VND","VUV","WST","XAF","XAG","XAU","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XTS","XXX","YER","ZAR","ZMK","ZMW","BTC","ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "currency_rate": z.number().nullable().describe("Currency Exchange Rate at the time entity was recorded/generated.").optional(), "customer": z.object({ "company_name": z.string().nullable().describe("The company name of the customer.").readonly().optional(), "display_id": z.string().nullable().describe("The display ID of the customer.").readonly().optional(), "display_name": z.string().nullable().describe("The display name of the customer.").optional(), "id": z.string().describe("The ID of the customer this entity is linked to.") }).nullable().describe("The customer this entity is linked to.").optional(), "customer_memo": z.string().nullable().describe("Customer memo").optional(), "deposit": z.number().nullable().describe("Amount of deposit made to this invoice.").optional(), "discount_amount": z.number().nullable().describe("Discount amount applied to this invoice.").optional(), "discount_percentage": z.number().nullable().describe("Discount percentage applied to this invoice.").optional(), "downstream_id": z.string().nullable().describe("The third-party API ID of original entity").readonly().optional(), "due_date": z.string().date().nullable().describe("The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "invoice_date": z.string().date().nullable().describe("Date invoice was issued - YYYY-MM-DD.").optional(), "invoice_sent": z.boolean().describe("Invoice sent to contact/customer.").optional(), "line_items": z.array(z.object({ "code": z.string().nullable().describe("User defined item code").optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "department_id": z.string().nullable().describe("Department id").optional(), "description": z.string().nullable().describe("User defined description").optional(), "discount_amount": z.number().nullable().describe("Discount amount applied to the line item when supported downstream.").optional(), "discount_percentage": z.number().nullable().describe("Discount percentage applied to the line item when supported downstream.").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "item": z.object({ "code": z.string().nullable().describe("User defined item code").readonly().optional(), "id": z.string().nullable().describe("ID of the linked item. A reference to the [invoice item](https://developers.apideck.com/apis/accounting/reference#tag/Invoice-Items) that was used to create this line item").optional(), "name": z.string().nullable().describe("User defined item name").readonly().optional() }).optional(), "ledger_account": z.object({ "code": z.string().nullable().describe("The code assigned to the account.").optional(), "id": z.string().describe("The unique identifier for the account.").optional(), "name": z.string().nullable().describe("The name of the account.").readonly().optional(), "nominal_code": z.string().nullable().describe("The nominal code of the account.").optional() }).nullable().optional(), "line_number": z.number().int().nullable().describe("Line number in the invoice").optional(), "location_id": z.string().nullable().describe("Location id").optional(), "quantity": z.number().nullable().optional(), "row_id": z.string().describe("Row ID").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "tax_amount": z.number().nullable().describe("Tax amount").optional(), "tax_rate": z.object({ "code": z.string().nullable().describe("Tax rate code").readonly().optional(), "id": z.string().nullable().describe("The ID of the object.").optional(), "name": z.string().nullable().describe("Name of the tax rate").readonly().optional(), "rate": z.number().nullable().describe("Rate of the tax rate").readonly().optional() }).optional(), "total_amount": z.number().nullable().describe("Total amount of the line item").optional(), "type": z.enum(["sales_item","discount","info","sub_total"]).nullable().describe("Item type").optional(), "unit_of_measure": z.string().nullable().describe("Description of the unit type the item is sold as, ie: kg, hour.").optional(), "unit_price": z.number().nullable().optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional() }).strict()).optional(), "number": z.string().nullable().describe("Invoice number.").optional(), "po_number": z.string().nullable().describe("A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.").optional(), "reference": z.string().nullable().describe("Optional invoice reference.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "shipping_address": z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary","secondary","home","office","shipping","billing","other"]).optional(), "website": z.string().nullable().optional() }).strict().optional(), "source_document_url": z.string().nullable().describe("URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.").optional(), "status": z.enum(["draft","submitted","authorised","partially_paid","paid","void","credit","deleted"]).nullable().describe("Invoice status").optional(), "sub_total": z.number().nullable().describe("Sub-total amount, normally before tax.").optional(), "tax_code": z.string().nullable().describe("Applicable tax id/code override if tax is not supplied on a line item basis.").optional(), "tax_inclusive": z.boolean().nullable().describe("Amounts are including tax").optional(), "template_id": z.string().nullable().describe("Optional invoice template").optional(), "terms": z.string().nullable().describe("Terms of payment.").optional(), "total": z.number().nullable().describe("Total amount of invoice, including tax.").optional(), "total_tax": z.number().nullable().describe("Total tax amount applied to this invoice.").optional(), "type": z.enum(["standard","credit","service","product","supplier","other"]).nullable().describe("Invoice type").optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional() }).strict().optional() }).shape