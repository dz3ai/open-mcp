import { z } from "zod"

export const toolName = `patchpushdevicedetails`
export const toolDescription = `Update a device registration`
export const baseUrl = `https://rest.ably.io`
export const path = `/push/deviceRegistrations/{device_id}`
export const method = `patch`
export const security = [
  {
    "key": "Authorization",
    "value": "Basic <mcp-env-var>USERNAME_PASSWORD_BASE64</mcp-env-var>",
    "in": "header",
    "envVarName": "USERNAME_PASSWORD_BASE64",
    "schemeType": "http",
    "schemeScheme": "basic"
  },
  {
    "key": "Authorization",
    "value": "Bearer <mcp-env-var>API_KEY</mcp-env-var>",
    "in": "header",
    "envVarName": "API_KEY",
    "schemeType": "http",
    "schemeScheme": "bearer"
  }
]

export const inputParams = z.object({ "path": z.object({ "device_id": z.string().describe("Device's ID.") }).optional(), "body": z.object({ "clientId": z.string().describe("Optional trusted client identifier for the device.").optional(), "deviceSecret": z.string().describe("Secret value for the device.").optional(), "formFactor": z.enum(["phone","tablet","desktop","tv","watch","car","embedded"]).describe("Form factor of the push device.").optional(), "id": z.string().describe("Unique identifier for the device generated by the device itself.").optional(), "metadata": z.record(z.any()).describe("Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.").optional(), "platform": z.enum(["ios","android"]).describe("Platform of the push device.").optional(), "push.recipient": z.object({ "clientId": z.string().describe("Client ID of recipient").optional(), "deviceId": z.string().describe("Client ID of recipient").optional(), "deviceToken": z.string().describe("when using APNs, specifies the required device token.").optional(), "registrationToken": z.string().describe("when using GCM or FCM, specifies the required registration token.").optional(), "transportType": z.enum(["apns","fcm","gcm"]).describe("Defines which push platform is being used.").optional() }).describe("Push recipient details for a device.").optional(), "push.state": z.enum(["Active","Failing","Failed"]).describe("the current state of the push device.").readonly().optional() }).optional() }).shape