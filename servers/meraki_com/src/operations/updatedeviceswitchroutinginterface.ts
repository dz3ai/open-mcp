import { z } from "zod"

export const toolName = `updatedeviceswitchroutinginterface`
export const toolDescription = `Update a layer 3 interface for a switch`
export const baseUrl = `https://api.meraki.com/api/v1`
export const path = `/devices/{serial}/switch/routing/interfaces/{interfaceId}`
export const method = `put`
export const security = [
  {
    "key": "X-Cisco-Meraki-API-Key",
    "value": "<mcp-env-var>X_CISCO_MERAKI_API_KEY</mcp-env-var>",
    "in": "header",
    "envVarName": "X_CISCO_MERAKI_API_KEY",
    "schemeType": "apiKey",
    "schemeName": "X-Cisco-Meraki-API-Key"
  }
]

export const inputParams = z.object({ "path": z.object({ "serial": z.string(), "interfaceId": z.string() }).optional(), "body": z.object({ "defaultGateway": z.string().describe("The next hop for any traffic that isn't going to a directly connected subnet or over a static route.         This IP address must exist in a subnet with a routed interface. Required if this is the first IPv4 interface.").optional(), "interfaceIp": z.string().describe("The IP address this switch will use for layer 3 routing on this VLAN or subnet. This cannot be the same         as the switch's management IP.").optional(), "ipv6": z.object({ "address": z.string().describe("The IPv6 address of the interface. Required if assignmentMode is 'static'. Must not be included if           assignmentMode is 'eui-64'.").optional(), "assignmentMode": z.string().describe("The IPv6 assignment mode for the interface. Can be either 'eui-64' or 'static'.").optional(), "gateway": z.string().describe("The IPv6 default gateway of the interface. Required if prefix is defined and this is the first           interface with IPv6 configured for the switch.").optional(), "prefix": z.string().describe("The IPv6 prefix of the interface. Required if IPv6 object is included.").optional() }).describe("The IPv6 settings of the interface.").optional(), "multicastRouting": z.enum(["IGMP snooping querier","disabled","enabled"]).describe("Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.").optional(), "name": z.string().describe("A friendly name or description for the interface or VLAN.").optional(), "ospfSettings": z.object({ "area": z.string().describe("The OSPF area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPF area. Defaults to 'disabled'.").optional(), "cost": z.number().int().describe("The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority.").optional(), "isPassiveEnabled": z.boolean().describe("When enabled, OSPF will not run on the interface, but the subnet will still be advertised.").optional() }).describe("The OSPF routing settings of the interface.").optional(), "ospfV3": z.object({ "area": z.string().describe("The OSPFv3 area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPFv3 area. Defaults to 'disabled'.").optional(), "cost": z.number().int().describe("The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority.").optional(), "isPassiveEnabled": z.boolean().describe("When enabled, OSPFv3 will not run on the interface, but the subnet will still be advertised.").optional() }).describe("The OSPFv3 routing settings of the interface.").optional(), "subnet": z.string().describe("The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24).").optional(), "vlanId": z.number().int().describe("The VLAN this routed interface is on. VLAN must be between 1 and 4094.").optional() }).optional() }).shape