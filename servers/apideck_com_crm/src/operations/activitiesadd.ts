import { z } from "zod"

export const toolName = `activitiesadd`
export const toolDescription = `Create activity`
export const baseUrl = `https://unify.apideck.com`
export const path = `/crm/activities`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
    "in": "header",
    "envVarName": "AUTHORIZATION",
    "schemeType": "apiKey",
    "schemeName": "Authorization"
  }
]

export const inputParams = z.object({ "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "body": z.object({ "account_id": z.string().nullable().optional(), "activity_date": z.string().nullable().optional(), "activity_datetime": z.string().nullable().optional(), "all_day_event": z.boolean().optional(), "archived": z.boolean().optional(), "asset_id": z.string().nullable().optional(), "attendees": z.array(z.object({ "contact_id": z.string().readonly().optional(), "created_at": z.string().datetime({ offset: true }).readonly().optional(), "email_address": z.string().nullable().optional(), "first_name": z.string().nullable().optional(), "id": z.string().readonly().optional(), "is_organizer": z.boolean().nullable().optional(), "last_name": z.string().nullable().optional(), "middle_name": z.string().nullable().optional(), "name": z.string().min(1).optional(), "prefix": z.string().nullable().optional(), "status": z.enum(["accepted","tentative","declined"]).nullable().optional(), "suffix": z.string().nullable().optional(), "updated_at": z.string().datetime({ offset: true }).readonly().optional(), "user_id": z.string().readonly().optional() }).strict()).optional(), "campaign_id": z.string().nullable().optional(), "case_id": z.string().nullable().optional(), "child": z.boolean().optional(), "company_id": z.string().nullable().optional(), "contact_id": z.string().nullable().optional(), "contract_id": z.string().nullable().optional(), "created_at": z.string().readonly().optional(), "created_by": z.string().nullable().readonly().optional(), "custom_fields": z.array(z.object({ "description": z.string().describe("More information about the custom field").optional(), "id": z.string(), "name": z.string().describe("Name of the custom field.").optional(), "value": z.union([z.string().nullable(), z.number().nullable(), z.boolean().nullable(), z.array(z.string())]).optional() }).strict()).optional(), "custom_object_id": z.string().nullable().optional(), "deleted": z.boolean().optional(), "description": z.string().nullable().optional(), "done": z.boolean().describe("Whether the Activity is done or not").optional(), "downstream_id": z.string().nullable().describe("The third-party API ID of original entity").readonly().optional(), "duration_minutes": z.number().int().nullable().readonly().optional(), "duration_seconds": z.number().int().gte(0).nullable().optional(), "end_date": z.string().nullable().optional(), "end_datetime": z.string().nullable().optional(), "event_sub_type": z.string().nullable().optional(), "group_event": z.boolean().optional(), "group_event_type": z.string().nullable().optional(), "id": z.string().readonly().optional(), "lead_id": z.string().nullable().optional(), "location": z.string().nullable().optional(), "location_address": z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary","secondary","home","office","shipping","billing","other"]).optional(), "website": z.string().nullable().optional() }).strict().optional(), "note": z.string().nullable().optional(), "opportunity_id": z.string().nullable().optional(), "owner_id": z.string().nullable().optional(), "private": z.boolean().optional(), "product_id": z.string().nullable().optional(), "recurrent": z.boolean().optional(), "reminder_datetime": z.string().nullable().optional(), "reminder_set": z.boolean().nullable().optional(), "show_as": z.enum(["free","busy"]).optional(), "solution_id": z.string().nullable().optional(), "start_datetime": z.string().nullable().optional(), "title": z.string().nullable().optional(), "type": z.enum(["call","meeting","email","note","task","deadline","send-letter","send-quote","other"]), "updated_at": z.string().readonly().optional(), "updated_by": z.string().nullable().readonly().optional(), "user_id": z.string().nullable().optional(), "video_conference_id": z.string().optional(), "video_conference_url": z.string().optional() }).strict().optional() }).shape