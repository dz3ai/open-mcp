import { z } from "zod";
export const toolName = `postlocate`;
export const toolDescription = `Location query`;
export const baseUrl = `https://positioning.hereapi.com/v2`;
export const path = `/locate`;
export const method = `post`;
export const security = [
    {
        "key": "apiKey",
        "value": "<mcp-env-var>APIKEY</mcp-env-var>",
        "in": "query",
        "envVarName": "APIKEY",
        "schemeType": "apiKey",
        "schemeName": "apiKey"
    },
    {
        "key": "Authorization",
        "value": "Bearer <mcp-env-var>API_KEY</mcp-env-var>",
        "in": "header",
        "envVarName": "API_KEY",
        "schemeType": "http",
        "schemeScheme": "bearer"
    }
];
export const inputParams = z.object({ "query": z.object({ "confidence": z.number().int().gte(50).lte(99).describe("Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).\n"), "fallback": z.array(z.enum(["any", "area", "singleWifi"])).describe("Acceptable fallback options for cell and WLAN positioning. Values `area` and `any` apply to cell based positioning, and value `singleWifi` applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both `area` and `any` are specified, then `area` is ignored.\n\nBy default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the `fallback=area` setting. If you use the `fallback=any` setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.\n\nFor privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the `fallback=singleWifi` setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.\n").optional(), "desired": z.array(z.literal("altitude")).describe("Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value `altitude`.\n").optional(), "required": z.array(z.literal("altitude")).describe("Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value `altitude`.\n").optional() }).optional(), "header": z.object({ "Content-Encoding": z.literal("gzip").describe("Indicates that the data in the body is gzip-encoded.").optional(), "X-Request-ID": z.string().describe("ID used for correlating customer requests within HERE services. Used for logging and error reporting. Can be any string, but UUID is recommended. It will be echoed in the response.\n").optional() }).optional(), "body": z.object({ "cdma": z.array(z.object({ "baseLat": z.number().gte(-90).lte(90).describe("Base station latitude").optional(), "baseLng": z.number().gte(-180).lte(180).describe("Base station longitude").optional(), "bsid": z.number().int().gte(0).lte(65535).describe("Base Station ID (CDMA BSID, BID)"), "localId": z.object({ "channel": z.number().int().gte(0).lte(2047).describe("CDMA channel frequency"), "pnOffset": z.number().int().gte(0).lte(511).describe("Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell.\n") }).strict().describe("Local identification parameters of CDMA serving cell").optional(), "nid": z.number().int().gte(0).lte(65535).describe("Network ID (NID)"), "nmr": z.array(z.object({ "bsid": z.number().int().gte(0).lte(65535).describe("Base Station ID (CDMA BSID, BID)").optional(), "channel": z.number().int().gte(0).lte(2047).describe("CDMA channel frequency"), "pilotPower": z.number().int().gte(-142).lte(-49).describe("Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49.\n").optional(), "pnOffset": z.number().int().gte(0).lte(511).describe("Pseudonoise offset. This field and CDMA channel frequency together allow for the locally unique identification of the cell.\n") }).strict().describe("CDMA Network measurement")).min(1).max(32).describe("CDMA Network measurements").optional(), "pilotPower": z.number().int().gte(-142).lte(-49).describe("Pilot Power (dBm). If Pilot Power is not available directly, it needs to be calculated from Total Power in the band and Pilot Strength with respect to the Total Power. Pilot power less than -142dBm should be mapped to -142. Pilot power greater than -49dBm should be mapped to -49.\n").optional(), "rz": z.number().int().gte(0).lte(4095).describe("CDMA Registration Zone (RZ)").optional(), "sid": z.number().int().gte(1).lte(32767).describe("System ID (SID)") }).strict().describe("CDMA measurement")).min(1).max(16).describe("CDMA cells (CDMA2000)").optional(), "client": z.object({ "firmware": z.string().min(1).max(150).describe("Device firmware version information").optional(), "manufacturer": z.string().min(2).max(50).describe("Manufacturer of the device (hardware)"), "model": z.string().min(1).max(50).describe("Model of the device (hardware)"), "name": z.string().min(3).max(50).describe("Name of the client software accessing the HERE API"), "platform": z.string().min(3).max(50).describe("Software platform information of the device, for example operating system name and version.").optional(), "version": z.string().min(3).max(13).describe("Version of the client software in format X.Y.Z, where X [0..255] is a major, Y [0..255] is a minor, and Z [0..65535] is a build version number. Increase the version/build number for each release of the client.") }).strict().describe("Information about the client").optional(), "gsm": z.array(z.object({ "cid": z.number().int().gte(0).lte(65535).describe("Cell identifier (GERAN CID)"), "lac": z.any().refine((value) => !z.any().safeParse(value).success, "Invalid input: Should NOT be valid against schema").describe("Location Area Code (LAC). Note, value 65534 is invalid."), "localId": z.object({ "bcch": z.number().int().gte(0).lte(1023).describe("Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)"), "bsic": z.number().int().gte(0).lte(63).describe("Base Station Identity Code (BSIC, for instance, color code)") }).strict().describe("Local identification parameters of GSM serving cell").optional(), "mcc": z.any().refine((value) => !z.any().safeParse(value).success, "Invalid input: Should NOT be valid against schema").describe("Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used\n"), "mnc": z.number().int().gte(0).lte(999).describe("Mobile Network Code (MNC)."), "nmr": z.array(z.object({ "bcch": z.number().int().gte(0).lte(1023).describe("Broadcast Control Channel (BCCH, synonymous to ARFCN = Absolute Radio Frequency Channel)"), "bsic": z.number().int().gte(0).lte(63).describe("Base Station Identity Code (BSIC, for instance, color code)"), "globalIdentity": z.any().describe("The `lac` and `cid` parameters of global ID for GSM neighbor measurement. They should be from the same PLMN (MCC+MNC) as the serving cell.\n").optional(), "rxLevel": z.number().int().gte(-110).lte(-25).describe("Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25.\n").optional() }).strict().describe("GSM Network measurements.\n")).min(1).max(32).describe("GSM Network measurements").optional(), "rxLevel": z.number().int().gte(-110).lte(-25).describe("Received Signal power (dBm). Power less than -110dBm should be mapped to -110. Power greater than -25dBm should be mapped to -25.\n").optional(), "ta": z.number().int().gte(0).lte(63).describe("Timing advance (TA). Expressed in the units of GSM bits equaling to 48/13 Î¼s ~ 1107 meters.").optional() }).strict().describe("GSM measurement")).min(1).max(16).describe("GSM cells (GERAN)").optional(), "lte": z.array(z.any().describe("LTE measurement")).min(1).max(16).describe("LTE cells (E-UTRA, 4G)").optional(), "tdscdma": z.array(z.object({ "cid": z.number().int().gte(0).lte(268435455).describe("UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.\n"), "lac": z.any().refine((value) => !z.any().safeParse(value).success, "Invalid input: Should NOT be valid against schema").describe("Location Area Code (LAC). Note, value 65534 is invalid.").optional(), "localId": z.object({ "cellParams": z.number().int().gte(0).lte(127).describe("Cell Parameters ID (CDMA Spreading Code ID)"), "uarfcn": z.number().int().gte(0).lte(16383).describe("UTRAN Absolute Radio Frequency (U-ARFCN)") }).strict().describe("Local identification parameters of TD-SCDMA serving cell").optional(), "mcc": z.any().refine((value) => !z.any().safeParse(value).success, "Invalid input: Should NOT be valid against schema").describe("Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used\n"), "mnc": z.number().int().gte(0).lte(999).describe("Mobile Network Code (MNC)."), "nmr": z.array(z.object({ "cellParams": z.number().int().gte(0).lte(127).describe("Cell Parameters ID (CDMA Spreading Code ID)"), "cid": z.number().int().gte(0).lte(268435455).describe("UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.\n").optional(), "pathloss": z.number().int().gte(46).lte(158).describe("UTRAN pathloss (dBm)").optional(), "rscp": z.number().int().gte(-120).lte(-25).describe("Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.\n").optional(), "uarfcn": z.number().int().gte(0).lte(16383).describe("UTRAN Absolute Radio Frequency (U-ARFCN)") }).strict().describe("TD-SCDMA Network measurement")).min(1).max(32).describe("TD-SCDMA Network measurements. Maximum of 8 distinct uarfcn frequencies.").optional(), "pathloss": z.number().int().gte(46).lte(158).describe("UTRAN pathloss (dBm)").optional(), "rscp": z.number().int().gte(-120).lte(-25).describe("Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.\n").optional(), "ta": z.number().int().gte(0).lte(1530).describe("Timing advance (TA). Round-Trip distance presented in the units of 4*c/7.68e6 ~156 meters. That is, the scaling factor is 4 times the chip length at chip rate of 7.68 Mchips/s. Note that at chip rates 1.28 Mchips/s and 3.84 Mchips/s you need to scale according to chip length of 7.68 Mchips/s, that is, multiply by 6 or 2 if needed.\n").optional() }).strict().describe("TD-SCDMA measurement.")).min(1).max(16).describe("TD-SCDMA cells (UTRA-TDD, 3G UMTS TDD)").optional(), "wcdma": z.array(z.object({ "cid": z.number().int().gte(0).lte(268435455).describe("UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.\n"), "lac": z.any().refine((value) => !z.any().safeParse(value).success, "Invalid input: Should NOT be valid against schema").describe("Location Area Code (LAC). Note, value 65534 is invalid.").optional(), "localId": z.object({ "psc": z.number().int().gte(0).lte(511).describe("Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel)."), "uarfcndl": z.number().int().gte(0).lte(16383).describe("UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)") }).strict().describe("Local identification parameters of WCDMA serving cell").optional(), "mcc": z.any().refine((value) => !z.any().safeParse(value).success, "Invalid input: Should NOT be valid against schema").describe("Mobile Country Code (MCC). Note: 0xx is for test networks, 1xx and 8xx are not used\n"), "mnc": z.number().int().gte(0).lte(999).describe("Mobile Network Code (MNC)."), "nmr": z.array(z.object({ "cid": z.number().int().gte(0).lte(268435455).describe("UTRAN Cell Identifier (UC-Id), 28 bits (12 bits RNC and 16 bits Cell ID). MCC + MNC + CID uniquely identifies the WCDMA cell, LAC is optional.\n").optional(), "pathloss": z.number().int().gte(46).lte(158).describe("UTRAN pathloss (dBm)").optional(), "psc": z.number().int().gte(0).lte(511).describe("Primary Scrambling Code (PSC, Primary CPICH, Primary Control Pilot Channel)."), "rscp": z.number().int().gte(-120).lte(-25).describe("Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.\n").optional(), "uarfcndl": z.number().int().gte(0).lte(16383).describe("UTRAN Absolute Radio Frequency Downlink (UARFCN-DL)") }).strict().describe("WCDMA Network measurement")).min(1).max(32).describe("WCDMA Network measurements. Maximum of 8 distinct uarfcndl frequencies.").optional(), "pathloss": z.number().int().gte(46).lte(158).describe("UTRAN pathloss (dBm)").optional(), "rscp": z.number().int().gte(-120).lte(-25).describe("Received Signal Code Power (RSCP) in dBm. Power less than -120dBm should be mapped to -120. Power greater than -25dBm should be mapped to -25.\n").optional() }).strict().describe("WCDMA measurement")).min(1).max(16).describe("WCDMA cells (UTRA-FDD, 3G UMTS)").optional(), "wlan": z.array(z.object({ "mac": z.string().regex(new RegExp("^((([0-9a-fA-F]{2}:){5})|(([0-9a-fA-F]{2}-){5}))[0-9a-fA-F]{2}$")).describe("The MAC address of the WLAN access point. MAC-48 address with colon (:) or hyphen (-) separators, upper or lower case hex digits. Note that if the SSID contains postfix \"_nomap\", the AP should not be used for positioning.\n"), "rss": z.number().int().gte(-128).lte(0).describe("Received signal level (dBm) at the terminal").optional() }).strict().describe("WLAN measurement")).min(1).max(256).describe("WLAN access positions. For privacy reasons positioning based on a single WLAN AP is not possible; there has to be at least one other matching wlan or cell. Alternatively, you can allow fallbacks to less accurate single WLAN AP location estimates by using the setting `fallback=singleWifi`.\n").optional() }).strict().describe("Object wrapping the location data submitted in a request for a position. At least one of `gsm`, `wcdma`, `tdscdma`, `lte`, `cdma`, or `wlan` elements is required. Array elements should be unique within the request.\n").optional() }).shape;
