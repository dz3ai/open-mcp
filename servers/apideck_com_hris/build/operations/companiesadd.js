import { z } from "zod";
export const toolName = `companiesadd`;
export const toolDescription = `Create Company`;
export const baseUrl = `https://unify.apideck.com`;
export const path = `/hris/companies`;
export const method = `post`;
export const security = [
    {
        "key": "Authorization",
        "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
        "in": "header",
        "envVarName": "AUTHORIZATION",
        "schemeType": "apiKey",
        "schemeName": "Authorization"
    }
];
export const inputParams = z.object({ "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "body": z.object({ "addresses": z.array(z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary", "secondary", "home", "office", "shipping", "billing", "other"]).optional(), "website": z.string().nullable().optional() }).strict()).optional(), "company_number": z.string().nullable().describe("An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.").optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "debtor_id": z.string().min(1).optional(), "deleted": z.boolean().readonly().optional(), "display_name": z.string().min(1).optional(), "emails": z.array(z.object({ "email": z.string().email().min(1), "id": z.string().optional(), "type": z.enum(["primary", "secondary", "work", "personal", "billing", "other"]).optional() }).strict()).optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "legal_name": z.string().min(1), "phone_numbers": z.array(z.object({ "area_code": z.string().nullable().optional(), "country_code": z.string().nullable().optional(), "extension": z.string().nullable().optional(), "id": z.string().nullable().optional(), "number": z.string().min(1), "type": z.enum(["primary", "secondary", "home", "work", "office", "mobile", "assistant", "fax", "direct-dial-in", "personal", "other"]).optional() }).strict()).optional(), "status": z.enum(["active", "inactive", "trial", "other"]).optional(), "subdomain": z.string().min(1).optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional(), "websites": z.array(z.object({ "id": z.string().nullable().optional(), "type": z.enum(["primary", "secondary", "work", "personal", "other"]).optional(), "url": z.string().min(1) }).strict()).optional() }).strict().optional() }).shape;
