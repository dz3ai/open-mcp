{
  "type": "object",
  "properties": {
    "startAt": {
      "description": "The index of the first item to return in a page of results (page offset).",
      "default": 0,
      "format": "int64",
      "type": "integer"
    },
    "maxResults": {
      "description": "The maximum number of items to return per page.",
      "default": 50,
      "format": "int32",
      "type": "integer"
    },
    "orderBy": {
      "description": "[Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.",
      "default": "key",
      "enum": [
        "category",
        "-category",
        "+category",
        "key",
        "-key",
        "+key",
        "name",
        "-name",
        "+name",
        "owner",
        "-owner",
        "+owner",
        "issueCount",
        "-issueCount",
        "+issueCount",
        "lastIssueUpdatedDate",
        "-lastIssueUpdatedDate",
        "+lastIssueUpdatedDate",
        "archivedDate",
        "+archivedDate",
        "-archivedDate",
        "deletedDate",
        "+deletedDate",
        "-deletedDate"
      ],
      "type": "string"
    },
    "id": {
      "description": "The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.",
      "items": {
        "format": "int64",
        "type": "integer"
      },
      "type": "array",
      "uniqueItems": true
    },
    "keys": {
      "description": "The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.",
      "items": {
        "default": "",
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true
    },
    "query": {
      "description": "Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).",
      "type": "string"
    },
    "typeKey": {
      "description": "Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.",
      "type": "string"
    },
    "categoryId": {
      "description": "The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.",
      "format": "int64",
      "type": "integer"
    },
    "action": {
      "description": "Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.",
      "default": "view",
      "enum": [
        "view",
        "browse",
        "edit",
        "create"
      ],
      "type": "string"
    },
    "expand": {
      "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.",
      "type": "string"
    },
    "status": {
      "description": "EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin.",
      "items": {
        "default": "live",
        "enum": [
          "live",
          "archived",
          "deleted"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "properties": {
      "description": "EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.",
      "items": {
        "additionalProperties": false,
        "type": "object"
      },
      "type": "array"
    },
    "propertyQuery": {
      "description": "EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.",
      "type": "string"
    }
  },
  "required": []
}