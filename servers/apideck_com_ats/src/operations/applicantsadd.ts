import { z } from "zod"

export const toolName = `applicantsadd`
export const toolDescription = `Create applicant`
export const baseUrl = `https://unify.apideck.com`
export const path = `/ats/applicants`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
    "in": "header",
    "envVarName": "AUTHORIZATION",
    "schemeType": "apiKey",
    "schemeName": "Authorization"
  }
]

export const inputParams = z.object({ "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "body": z.object({ "addresses": z.array(z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary","secondary","home","office","shipping","billing","other"]).optional(), "website": z.string().nullable().optional() }).strict()).optional(), "anonymized": z.boolean().optional(), "applications": z.array(z.string()).nullable().optional(), "archived": z.boolean().optional(), "birthday": z.string().date().nullable().describe("The date of birth of the person.").optional(), "confidential": z.boolean().optional(), "coordinator_id": z.string().optional(), "cover_letter": z.string().optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "custom_fields": z.array(z.object({ "description": z.string().describe("More information about the custom field").optional(), "id": z.string(), "name": z.string().describe("Name of the custom field.").optional(), "value": z.union([z.string().nullable(), z.number().nullable(), z.boolean().nullable(), z.array(z.string())]).optional() }).strict()).optional(), "cv_url": z.string().readonly().optional(), "deleted": z.boolean().nullable().optional(), "deleted_at": z.string().datetime({ offset: true }).nullable().describe("The time at which the object was deleted.").readonly().optional(), "deleted_by": z.string().nullable().describe("The user who deleted the object.").readonly().optional(), "emails": z.array(z.object({ "email": z.string().email().min(1), "id": z.string().optional(), "type": z.enum(["primary","secondary","work","personal","billing","other"]).optional() }).strict()).optional(), "first_name": z.string().nullable().describe("The first name of the person.").optional(), "followers": z.array(z.string()).nullable().optional(), "headline": z.string().describe("Typically a list of previous companies where the contact has worked or schools that the contact has attended").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "initials": z.string().nullable().describe("The initials of the person, usually derived from their first, middle, and last names.").optional(), "job_url": z.string().nullable().readonly().optional(), "last_interaction_at": z.string().datetime({ offset: true }).readonly().optional(), "last_name": z.string().nullable().describe("The last name of the person.").optional(), "middle_name": z.string().nullable().describe("Middle name of the person.").optional(), "name": z.string().describe("The name of an applicant.").optional(), "owner_id": z.string().optional(), "phone_numbers": z.array(z.object({ "area_code": z.string().nullable().optional(), "country_code": z.string().nullable().optional(), "extension": z.string().nullable().optional(), "id": z.string().nullable().optional(), "number": z.string().min(1), "type": z.enum(["primary","secondary","home","work","office","mobile","assistant","fax","direct-dial-in","personal","other"]).optional() }).strict()).optional(), "photo_url": z.string().nullable().describe("The URL of the photo of a person.").optional(), "position_id": z.string().describe("The PositionId the applicant applied for.").optional(), "record_url": z.string().nullable().optional(), "recruiter_id": z.string().optional(), "rejected_at": z.string().datetime({ offset: true }).nullable().readonly().optional(), "social_links": z.array(z.object({ "id": z.string().nullable().optional(), "type": z.string().nullable().optional(), "url": z.string().min(1) }).strict()).optional(), "source_id": z.string().readonly().optional(), "sourced_by": z.string().nullable().readonly().optional(), "sources": z.array(z.string()).nullable().optional(), "stage_id": z.string().optional(), "tags": z.array(z.string()).optional(), "title": z.string().nullable().describe("The job title of the person.").optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional(), "websites": z.array(z.object({ "id": z.string().nullable().optional(), "type": z.enum(["primary","secondary","work","personal","other"]).optional(), "url": z.string().min(1) }).strict()).optional() }).strict().optional() }).shape