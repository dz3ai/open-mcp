import { z } from "zod"

export const toolName = `purchasetoken`
export const toolDescription = `Generate a consumer token`
export const baseUrl = `https://api.klarna.com`
export const path = `/payments/v1/authorizations/{authorizationToken}/customer-token`
export const method = `post`
export const security = []

export const inputParams = z.object({ "path": z.object({ "authorizationToken": z.string() }).optional(), "body": z.object({ "billing_address": z.object({ "attention": z.string().min(0).max(99).describe("‘Attn.’ (if applicable). Only applicable for B2B customers.").optional(), "city": z.string().min(0).max(99).describe("Customer’s city.").optional(), "country": z.string().regex(new RegExp("^[A-Za-z]{2,2}$")).describe("Customer’s country. This value overrides the purchase country if they are different. Should follow the standard of ISO 3166 alpha-2. E.g. GB, US, DE, SE.").optional(), "email": z.string().min(0).max(99).describe("Customer’s email address.").optional(), "family_name": z.string().min(0).max(99).describe("Customers family name in UTF-8 encoding.\nCannot be only numbers, must be more than 1 character.\nAllowed special characters: -'’.\nMore information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)").optional(), "given_name": z.string().min(0).max(99).describe("Customers given name in UTF-8 encoding.\nCannot be only numbers, must be more than 1 character.\nAllowed special characters: -'’.\nMore information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)").optional(), "organization_name": z.string().min(0).max(99).describe("Organization name (if applicable). Only applicable for B2B customers.").optional(), "phone": z.string().min(5).max(99).describe("Phone number. Preferably a mobile phone number.").optional(), "postal_code": z.string().min(0).max(10).describe("Customer’s postal code. Validation according to Universal Postal Union addressing systems.\nE.g. 12345, W1G OPW.").optional(), "region": z.string().min(0).max(99).describe("Customer’s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc.").optional(), "street_address": z.string().min(0).max(99).describe("Customer’s street address. Regional formatting is required, as follows:\nUK/US/FR: 33 Cavendish Square\nRest of EU: De Ruijterkade 7").optional(), "street_address2": z.string().min(0).max(99).describe("Customer’s street address. Second Line. ").optional(), "title": z.string().min(0).max(20).describe("Customer’s Title. Allowed values per country:\nUK - \"Mr\", \"Ms\"\nDE - \"Herr\", \"Frau\"\nAT: \"Herr, \"Frau\"\nCH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\" \nBE: \"Dhr.\", \"Mevr.\"\nNL: \"Dhr.\", \"Mevr.\"").optional() }).optional(), "customer": z.object({ "date_of_birth": z.string().describe("Customer’s date of birth. The format is ‘yyyy-mm-dd’").optional(), "gender": z.string().describe("Customer’s gender - ‘male’ or ‘female’").optional(), "last_four_ssn": z.string().regex(new RegExp("^([0-9]{4}|[0-9]{9})$")).describe("Last four digits of the customer's social security number. This value is available for US customers.").optional(), "national_identification_number": z.string().describe("The customer's national identification number. This value is available for EU customers utilizing national identification numbers.").optional(), "organization_entity_type": z.enum(["LIMITED_COMPANY","PUBLIC_LIMITED_COMPANY","ENTREPRENEURIAL_COMPANY","LIMITED_PARTNERSHIP_LIMITED_COMPANY","LIMITED_PARTNERSHIP","GENERAL_PARTNERSHIP","REGISTERED_SOLE_TRADER","SOLE_TRADER","CIVIL_LAW_PARTNERSHIP","PUBLIC_INSTITUTION","OTHER"]).describe("Organization entity type. Only applicable for B2B customers.").optional(), "organization_registration_id": z.string().describe("Organization registration id. Only applicable for B2B customers.").optional(), "title": z.string().describe("Customer’s Title. Allowed values per country:\nUK - \"Mr\", \"Ms\"\nDE - \"Herr\", \"Frau\"\nAT: \"Herr, \"Frau\"\nCH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\" \nBE: \"Dhr.\", \"Mevr.\"\nNL: \"Dhr.\", \"Mevr.\"").optional(), "type": z.string().regex(new RegExp("^(person|organization)$")).describe("Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.").optional(), "vat_id": z.string().describe("VAT ID. Only applicable for B2B customers.").optional() }).optional(), "description": z.string().max(255).describe("Description of the purpose of the token."), "intended_use": z.literal("SUBSCRIPTION").describe("Intended use for the token."), "locale": z.string().regex(new RegExp("^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$")).describe("RFC 1766 customer's locale."), "purchase_country": z.string().regex(new RegExp("^[A-Za-z]{2,2}$")).describe("ISO 3166 alpha-2 purchase country."), "purchase_currency": z.string().regex(new RegExp("^[A-Za-z]{3,3}$")).describe("ISO 4217 purchase currency.") }).optional() }).shape