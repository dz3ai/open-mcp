import { z } from "zod"

export const toolName = `paymentsadd`
export const toolDescription = `Create Payment`
export const baseUrl = `https://unify.apideck.com`
export const path = `/pos/payments`
export const method = `post`
export const security = [
  {
    "key": "Authorization",
    "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
    "in": "header",
    "envVarName": "AUTHORIZATION",
    "schemeType": "apiKey",
    "schemeName": "Authorization"
  }
]

export const inputParams = z.object({ "query": z.object({ "raw": z.boolean().describe("Include raw response. Mostly used for debugging purposes") }).optional(), "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application"), "x-apideck-service-id": z.string().describe("Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.").optional() }).optional(), "body": z.object({ "amount": z.number(), "app_fee": z.number().describe("The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.").optional(), "approved": z.number().describe("The initial amount of money approved for this payment.").optional(), "bank_account": z.object({ "account_ownership_type": z.string().max(50).describe("The ownership type of the bank account performing the transfer.\nThe type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.").optional(), "ach_details": z.object({ "account_number_suffix": z.string().max(4).describe("The last few digits of the bank account number.").optional(), "account_type": z.string().max(50).describe("The type of the bank account performing the transfer. The account type can be `CHECKING`,\n`SAVINGS`, or `UNKNOWN`.").optional(), "routing_number": z.string().max(50).describe("The routing number for the bank account.").optional() }).describe("ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.").optional(), "bank_name": z.string().max(100).describe("The name of the bank associated with the bank account.").optional(), "country": z.string().min(2).max(2).nullable().describe("Country code according to ISO 3166-1 alpha-2.").optional(), "fingerprint": z.string().max(255).describe("Uniquely identifies the bank account for this seller and can be used\nto determine if payments are from the same bank account.").optional(), "statement_description": z.string().max(1000).describe("The statement description as sent to the bank.").optional(), "transfer_type": z.string().max(50).describe("The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.").optional() }).describe("Card details for this payment. This field is currently not available. Reach out to our team for more info.").optional(), "card_details": z.object({ "card": z.object({ "billing_address": z.object({ "city": z.string().nullable().describe("Name of city.").optional(), "contact_name": z.string().nullable().optional(), "country": z.string().nullable().describe("country code according to ISO 3166-1 alpha-2.").optional(), "county": z.string().nullable().describe("Address field that holds a sublocality, such as a county").optional(), "email": z.string().nullable().optional(), "fax": z.string().nullable().optional(), "id": z.string().nullable().optional(), "latitude": z.string().nullable().optional(), "line1": z.string().nullable().describe("Line 1 of the address e.g. number, street, suite, apt #, etc.").optional(), "line2": z.string().nullable().describe("Line 2 of the address").optional(), "line3": z.string().nullable().describe("Line 3 of the address").optional(), "line4": z.string().nullable().describe("Line 4 of the address").optional(), "longitude": z.string().nullable().optional(), "name": z.string().nullable().optional(), "phone_number": z.string().nullable().optional(), "postal_code": z.string().nullable().describe("Zip code or equivalent.").optional(), "row_version": z.string().nullable().describe("A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.").optional(), "salutation": z.string().nullable().optional(), "state": z.string().nullable().describe("Name of state").optional(), "street_number": z.string().nullable().describe("Street number").optional(), "string": z.string().nullable().optional(), "type": z.enum(["primary","secondary","home","office","shipping","billing","other"]).optional(), "website": z.string().nullable().optional() }).strict().optional(), "bin": z.string().nullable().describe("The first six digits of the card number, known as the Bank Identification Number (BIN).").optional(), "card_brand": z.enum(["visa","mastercard","amex","discover","discover-diners","jcb","china-unionpay","square-gift-card","square-capital-card","interac","eftpos","felica","ebt","other"]).nullable().describe("The first six digits of the card number, known as the Bank Identification Number (BIN).").optional(), "card_type": z.enum(["credit","debit","prepaid","other"]).nullable().optional(), "cardholder_name": z.string().nullable().optional(), "customer_id": z.string().nullable().optional(), "enabled": z.boolean().nullable().describe("Indicates whether or not a card can be used for payments.").optional(), "exp_month": z.number().int().gte(1).lte(12).nullable().describe("The expiration month of the associated card as an integer between 1 and 12.").optional(), "exp_year": z.number().int().nullable().describe("The four-digit year of the card's expiration date.").optional(), "fingerprint": z.string().nullable().optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "last_4": z.string().nullable().optional(), "merchant_id": z.string().optional(), "prepaid_type": z.enum(["non-prepaid","prepaid","unknown"]).nullable().optional(), "reference_id": z.string().nullable().describe("An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.").optional(), "version": z.string().nullable().optional() }).strict().nullable().describe("A card's non-confidential details.").optional() }).optional(), "cash": z.object({ "amount": z.any().describe("The amount of cash given by the customer.").optional(), "charge_back_amount": z.any().describe("The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.").optional() }).describe("Cash details for this payment").optional(), "change_back_cash_amount": z.number().optional(), "created_at": z.string().datetime({ offset: true }).describe("The date and time when the object was created.").readonly().optional(), "created_by": z.string().nullable().describe("The user who created the object.").readonly().optional(), "currency": z.enum(["UNKNOWN_CURRENCY","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRC","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","USS","UYI","UYU","UZS","VEF","VND","VUV","WST","XAF","XAG","XAU","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XTS","XXX","YER","ZAR","ZMK","ZMW","BTC","ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)."), "customer_id": z.string(), "device_id": z.string().optional(), "employee_id": z.string().optional(), "external_details": z.object({ "source": z.string().max(255).describe("A description of the external payment source. For example, \n\"Food Delivery Service\"."), "source_fee_amount": z.number().describe("The fees paid to the source. The amount minus this field is the net amount seller receives.").optional(), "source_id": z.string().max(255).describe("An ID to associate the payment to its originating source.").optional(), "type": z.enum(["check","bank_transfer","other_gift_card","crypto","square_cash","social","external","emoney","card","stored_balance","food_voucher","other"]).describe("The type of external payment the seller received. It can be one of the following:\n- CHECK - Paid using a physical check.\n- BANK_TRANSFER - Paid using external bank transfer.\n- OTHER\\_GIFT\\_CARD - Paid using a non-Square gift card.\n- CRYPTO - Paid using a crypto currency.\n- SQUARE_CASH - Paid using Square Cash App.\n- SOCIAL - Paid using peer-to-peer payment applications.\n- EXTERNAL - A third-party application gathered this payment outside of Square.\n- EMONEY - Paid using an E-money provider.\n- CARD - A credit or debit card that Square does not support.\n- STORED_BALANCE - Use for house accounts, store credit, and so forth.\n- FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals\n- OTHER - A type not listed here.") }).describe("Details about an external payment.").optional(), "external_payment_id": z.string().optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "idempotency_key": z.string().max(45).describe("A value you specify that uniquely identifies this request among requests you have sent.").optional(), "location_id": z.string().optional(), "merchant_id": z.string().optional(), "order_id": z.string(), "processing_fees": z.array(z.any()).optional(), "refunded": z.number().describe("The initial amount of money approved for this payment.").optional(), "service_charges": z.array(z.object({ "active": z.boolean().nullable().optional(), "amount": z.number().optional(), "currency": z.enum(["UNKNOWN_CURRENCY","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BOV","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHE","CHF","CHW","CLF","CLP","CNY","COP","COU","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MXV","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRC","TRY","TTD","TWD","TZS","UAH","UGX","USD","USN","USS","UYI","UYU","UZS","VEF","VND","VUV","WST","XAF","XAG","XAU","XBA","XBB","XBC","XBD","XCD","XDR","XOF","XPD","XPF","XPT","XTS","XXX","YER","ZAR","ZMK","ZMW","BTC","ETH"]).nullable().describe("Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).").optional(), "id": z.string().describe("A unique identifier for an object.").readonly().optional(), "name": z.string().describe("Service charge name").optional(), "percentage": z.number().describe("Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.").optional(), "type": z.enum(["auto_gratuity","custom"]).describe("The type of the service charge.").optional() })).describe("Optional service charges or gratuity tip applied to the order.").optional(), "source": z.enum(["card","bank_account","wallet","bnpl","cash","external","other"]).describe("Source of this payment.").optional(), "source_id": z.string().describe("The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`."), "status": z.enum(["approved","pending","completed","canceled","failed","other"]).describe("Status of this payment.").optional(), "tax": z.number().optional(), "tender_id": z.string(), "tip": z.number().optional(), "total": z.number().optional(), "updated_at": z.string().datetime({ offset: true }).nullable().describe("The date and time when the object was last updated.").readonly().optional(), "updated_by": z.string().nullable().describe("The user who last updated the object.").readonly().optional(), "wallet": z.object({ "status": z.enum(["authorized","captured","voided","failed","other"]).describe("The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.").optional() }).describe("Wallet details for this payment. This field is currently not available. Reach out to our team for more info.").optional() }).strict().optional() }).shape