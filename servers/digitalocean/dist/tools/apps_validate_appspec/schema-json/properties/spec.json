{
  "title": "AppSpec",
  "type": "object",
  "description": "The desired configuration of an application.",
  "properties": {
    "name": {
      "description": "The name of the app. Must be unique across all apps in the same account.",
      "maxLength": 32,
      "minLength": 2,
      "pattern": "^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
      "type": "string",
      "example": "web-app-01"
    },
    "region": {
      "description": "The slug form of the geographical origin of the app. Default: `nearest available`",
      "type": "string",
      "enum": [
        "ams",
        "nyc",
        "fra",
        "sfo",
        "sgp",
        "blr",
        "tor",
        "lon",
        "syd"
      ],
      "example": "nyc"
    },
    "domains": {
      "description": "A set of hostnames where the application will be available.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "maxLength": 253,
            "minLength": 4,
            "pattern": "^((xn--)?[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}\\.?$",
            "description": "The hostname for the domain",
            "example": "app.example.com"
          },
          "type": {
            "type": "string",
            "default": "UNSPECIFIED",
            "enum": [
              "UNSPECIFIED",
              "DEFAULT",
              "PRIMARY",
              "ALIAS"
            ],
            "description": "- DEFAULT: The default `.ondigitalocean.app` domain assigned to this app\n- PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.\n- ALIAS: A non-primary domain",
            "example": "DEFAULT"
          },
          "wildcard": {
            "type": "boolean",
            "description": "Indicates whether the domain includes all sub-domains, in addition to the given domain",
            "example": true
          },
          "zone": {
            "description": "Optional. If the domain uses DigitalOcean DNS and you would like App\nPlatform to automatically manage it for you, set this to the name of the\ndomain on your account.\n\nFor example, If the domain you are adding is `app.domain.com`, the zone\ncould be `domain.com`.",
            "type": "string",
            "format": "hostname",
            "example": "example.com"
          },
          "minimum_tls_version": {
            "type": "string",
            "maxLength": 3,
            "minLength": 3,
            "enum": [
              "1.2",
              "1.3"
            ],
            "description": "The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `\"1.2\"` or `\"1.3\"`.",
            "example": "1.3"
          }
        },
        "required": [
          "domain"
        ]
      }
    },
    "services": {
      "description": "Workloads which expose publicly-accessible HTTP services.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "static_sites": {
      "description": "Content which can be rendered to static web assets.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "jobs": {
      "description": "Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "workers": {
      "description": "Workloads which do not expose publicly-accessible HTTP services.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "functions": {
      "description": "Workloads which expose publicly-accessible HTTP services via Functions Components.",
      "items": {
        "type": "object",
        "properties": {
          "cors": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
            "description": "The name. Must be unique across all components within the same app.",
            "example": "api"
          },
          "source_dir": {
            "type": "string",
            "description": "An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.",
            "example": "path/to/dir"
          },
          "alerts": {
            "type": "array",
            "items": {
              "properties": {
                "rule": {
                  "default": "UNSPECIFIED_RULE",
                  "enum": [
                    "UNSPECIFIED_RULE",
                    "CPU_UTILIZATION",
                    "MEM_UTILIZATION",
                    "RESTART_COUNT",
                    "DEPLOYMENT_FAILED",
                    "DEPLOYMENT_LIVE",
                    "DOMAIN_FAILED",
                    "DOMAIN_LIVE",
                    "FUNCTIONS_ACTIVATION_COUNT",
                    "FUNCTIONS_AVERAGE_DURATION_MS",
                    "FUNCTIONS_ERROR_RATE_PER_MINUTE",
                    "FUNCTIONS_AVERAGE_WAIT_TIME_MS",
                    "FUNCTIONS_ERROR_COUNT",
                    "FUNCTIONS_GB_RATE_PER_SECOND"
                  ],
                  "type": "string",
                  "example": "CPU_UTILIZATION"
                },
                "disabled": {
                  "description": "Is the alert disabled?",
                  "type": "boolean",
                  "example": false
                },
                "operator": {
                  "default": "UNSPECIFIED_OPERATOR",
                  "enum": [
                    "UNSPECIFIED_OPERATOR",
                    "GREATER_THAN",
                    "LESS_THAN"
                  ],
                  "type": "string",
                  "example": "GREATER_THAN"
                },
                "value": {
                  "description": "Threshold value for alert",
                  "format": "float",
                  "type": "number",
                  "example": 2.32
                },
                "window": {
                  "default": "UNSPECIFIED_WINDOW",
                  "enum": [
                    "UNSPECIFIED_WINDOW",
                    "FIVE_MINUTES",
                    "TEN_MINUTES",
                    "THIRTY_MINUTES",
                    "ONE_HOUR"
                  ],
                  "type": "string",
                  "example": "FIVE_MINUTES"
                }
              },
              "type": "object"
            }
          },
          "envs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "pattern": "^[_A-Za-z][_A-Za-z0-9]*$",
                  "description": "The variable name",
                  "example": "BASE_URL"
                },
                "scope": {
                  "type": "string",
                  "enum": [
                    "UNSET",
                    "RUN_TIME",
                    "BUILD_TIME",
                    "RUN_AND_BUILD_TIME"
                  ],
                  "description": "- RUN_TIME: Made available only at run-time\n- BUILD_TIME: Made available only at build-time\n- RUN_AND_BUILD_TIME: Made available at both build and run-time",
                  "default": "RUN_AND_BUILD_TIME",
                  "example": "BUILD_TIME"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "GENERAL",
                    "SECRET"
                  ],
                  "description": "- GENERAL: A plain-text environment variable\n- SECRET: A secret encrypted environment variable",
                  "default": "GENERAL",
                  "example": "GENERAL"
                },
                "value": {
                  "description": "The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.",
                  "type": "string",
                  "example": "http://example.com"
                }
              },
              "required": [
                "key"
              ]
            },
            "description": "A list of environment variables made available to the component."
          },
          "git": {
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "description": "The name of the branch to use",
                "example": "main"
              },
              "repo_clone_url": {
                "type": "string",
                "description": "The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`",
                "example": "https://github.com/digitalocean/sample-golang.git"
              }
            }
          },
          "github": {
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "description": "The name of the branch to use",
                "example": "main"
              },
              "deploy_on_push": {
                "type": "boolean",
                "description": "Whether to automatically deploy new commits made to the repo",
                "example": true
              },
              "repo": {
                "type": "string",
                "description": "The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`",
                "example": "digitalocean/sample-golang"
              }
            }
          },
          "gitlab": {
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "description": "The name of the branch to use",
                "example": "main"
              },
              "deploy_on_push": {
                "type": "boolean",
                "description": "Whether to automatically deploy new commits made to the repo",
                "example": true
              },
              "repo": {
                "type": "string",
                "description": "The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`",
                "example": "digitalocean/sample-golang"
              }
            }
          },
          "bitbucket": {
            "type": "object",
            "properties": {
              "branch": {
                "type": "string",
                "description": "The name of the branch to use",
                "example": "main"
              },
              "deploy_on_push": {
                "type": "boolean",
                "description": "Whether to automatically deploy new commits made to the repo",
                "example": true
              },
              "repo": {
                "type": "string",
                "description": "The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`",
                "example": "digitalocean/sample-golang"
              }
            }
          },
          "log_destinations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 42,
                  "minLength": 2,
                  "pattern": "^[A-Za-z0-9()\\[\\]'\"][-A-Za-z0-9_. \\/()\\[\\]]{0,40}[A-Za-z0-9()\\[\\]'\"]$",
                  "example": "my_log_destination"
                },
                "papertrail": {
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "description": "Papertrail syslog endpoint.",
                      "example": "https://mypapertrailendpoint.com"
                    }
                  },
                  "description": "Papertrail configuration.",
                  "required": [
                    "endpoint"
                  ]
                },
                "datadog": {
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "description": "Datadog HTTP log intake endpoint.",
                      "example": "https://mydatadogendpoint.com"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "Datadog API key.",
                      "example": "abcdefghijklmnopqrstuvwxyz0123456789"
                    }
                  },
                  "description": "DataDog configuration.",
                  "required": [
                    "api_key"
                  ]
                },
                "logtail": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Logtail token.",
                      "example": "abcdefghijklmnopqrstuvwxyz0123456789"
                    }
                  },
                  "description": "Logtail configuration.",
                  "required": [
                    "endpoint"
                  ]
                },
                "open_search": {
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "description": "OpenSearch API Endpoint. Only HTTPS is supported. Format: https://<host>:<port>.\nCannot be specified if `cluster_name` is also specified.",
                      "example": "https://example.com:9300"
                    },
                    "basic_auth": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "string",
                          "description": "Username to authenticate with. Only required when `endpoint` is set.\nDefaults to `doadmin` when `cluster_name` is set.",
                          "example": "apps_user"
                        },
                        "password": {
                          "description": "Password for user defined in User. Is required when `endpoint` is set.\nCannot be set if using a DigitalOcean DBaaS OpenSearch cluster.",
                          "example": "password1"
                        }
                      },
                      "description": "Configure Username and/or Password for Basic authentication."
                    },
                    "index_name": {
                      "type": "string",
                      "default": "logs",
                      "description": "The index name to use for the logs. If not set, the default index name is \"logs\".",
                      "example": "logs"
                    },
                    "cluster_name": {
                      "type": "string",
                      "description": "The name of a DigitalOcean DBaaS OpenSearch cluster to use as a log forwarding destination.\nCannot be specified if `endpoint` is also specified.",
                      "example": "my-opensearch-cluster"
                    }
                  },
                  "description": "OpenSearch configuration."
                }
              },
              "title": "Configurations for external logging.",
              "required": [
                "name"
              ]
            },
            "description": "A list of configured log forwarding destinations."
          }
        },
        "required": [
          "name"
        ]
      },
      "type": "array"
    },
    "databases": {
      "description": "Database instances which can provide persistence to workloads within the\napplication.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "cluster_name": {
            "description": "The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.",
            "type": "string",
            "example": "cluster_name"
          },
          "db_name": {
            "description": "The name of the MySQL or PostgreSQL database to configure.",
            "type": "string",
            "example": "my_db"
          },
          "db_user": {
            "description": "The name of the MySQL or PostgreSQL user to configure.",
            "type": "string",
            "example": "superuser"
          },
          "engine": {
            "type": "string",
            "default": "UNSET",
            "enum": [
              "UNSET",
              "MYSQL",
              "PG",
              "REDIS",
              "MONGODB",
              "KAFKA",
              "OPENSEARCH"
            ],
            "description": "- MYSQL: MySQL\n- PG: PostgreSQL\n- REDIS: Redis\n- MONGODB: MongoDB\n- KAFKA: Kafka\n- OPENSEARCH: OpenSearch",
            "example": "PG"
          },
          "name": {
            "description": "The database's name. The name must be unique across all components within the same app and cannot use capital letters.",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
            "type": "string",
            "example": "prod-db"
          },
          "production": {
            "description": "Whether this is a production or dev database.",
            "type": "boolean",
            "example": true
          },
          "version": {
            "description": "The version of the database engine",
            "type": "string",
            "example": "12"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    "ingress": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `ingress` to the tool, first call the tool `expandSchema` with \"/properties/spec/properties/ingress\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Specification for app ingress configurations.</property-description>",
      "additionalProperties": true
    },
    "egress": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `egress` to the tool, first call the tool `expandSchema` with \"/properties/spec/properties/egress\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Specification for app egress configurations.</property-description>",
      "additionalProperties": true
    },
    "maintenance": {
      "type": "object",
      "description": "<llm-instruction>This part of the input schema is truncated. If you want to pass the property `maintenance` to the tool, first call the tool `expandSchema` with \"/properties/spec/properties/maintenance\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Specification to configure maintenance settings for the app, such as maintenance mode and archiving the app.</property-description>",
      "additionalProperties": true
    }
  },
  "required": [
    "name"
  ]
}