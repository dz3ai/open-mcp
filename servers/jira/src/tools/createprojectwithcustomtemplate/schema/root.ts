import { z } from "zod"

export const inputParamsSchema = {
  "details": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `details` to the tool, first call the tool `expandSchema` with \"/properties/details\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>Project Details</property-description>").optional(),
  "template": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `template` to the tool, first call the tool `expandSchema` with \"/properties/template\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>\n<property-description>The specific request object for creating a project with template.</property-description>").optional()
}