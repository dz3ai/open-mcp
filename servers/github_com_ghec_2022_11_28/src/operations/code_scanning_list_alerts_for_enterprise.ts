import { z } from "zod"

export const toolName = `code_scanning_list_alerts_for_enterprise`
export const toolDescription = `List code scanning alerts for an enterprise`
export const baseUrl = `https://github.com`
export const path = `/enterprises/{enterprise}/code-scanning/alerts`
export const method = `get`
export const security = []

export const inputParams = z.object({ "path": z.object({ "enterprise": z.string().describe("The slug version of the enterprise name. You can also substitute this value with the enterprise id.") }).optional(), "query": z.object({ "tool_name": z.string().describe("The name of the tool used to generate the code scanning analysis.").optional(), "tool_guid": z.string().nullable().describe("The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.").optional(), "before": z.string().describe("A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.").optional(), "after": z.string().describe("A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.").optional(), "page": z.number().int().describe("Page number of the results to fetch."), "per_page": z.number().int().describe("The number of results per page (max 100)."), "direction": z.enum(["asc","desc"]).describe("The direction to sort the results by."), "state": z.enum(["open","closed","dismissed","fixed"]).describe("State of a code scanning alert.").optional(), "sort": z.enum(["created","updated"]).describe("The property by which to sort the results.") }).optional() }).shape