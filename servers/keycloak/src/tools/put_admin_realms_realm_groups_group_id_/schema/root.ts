import { z } from "zod"

export const inputParamsSchema = {
  "id": z.string().optional(),
  "name": z.string().optional(),
  "path": z.string().optional(),
  "parentId": z.string().optional(),
  "subGroupCount": z.number().int().optional(),
  "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.number().int().optional(), "subGroups": z.array(z.object({ "id": z.string().optional(), "name": z.string().optional(), "path": z.string().optional(), "parentId": z.string().optional(), "subGroupCount": z.string().optional(), "subGroups": z.string().optional(), "attributes": z.string().optional(), "realmRoles": z.string().optional(), "clientRoles": z.string().optional(), "access": z.string().optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(), "attributes": z.record(z.array(z.string())).optional(), "realmRoles": z.array(z.string()).optional(), "clientRoles": z.record(z.array(z.string())).optional(), "access": z.record(z.boolean()).optional() })).optional(),
  "attributes": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `attributes` to the tool, first call the tool `expandSchema` with \"/properties/attributes\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "realmRoles": z.array(z.string()).optional(),
  "clientRoles": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `clientRoles` to the tool, first call the tool `expandSchema` with \"/properties/clientRoles\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional(),
  "access": z.record(z.any()).describe("<llm-instruction>This part of the input schema is truncated. If you want to pass the property `access` to the tool, first call the tool `expandSchema` with \"/properties/access\" in the list of pointers. This will return the expanded input schema which you can then use in the tool call. You may have to call `expandSchema` multiple times if the schema is nested.</llm-instruction>").optional()
}