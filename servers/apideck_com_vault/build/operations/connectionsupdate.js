import { z } from "zod";
export const toolName = `connectionsupdate`;
export const toolDescription = `Update connection`;
export const baseUrl = `https://unify.apideck.com`;
export const path = `/vault/connections/{unified_api}/{service_id}`;
export const method = `patch`;
export const security = [
    {
        "key": "Authorization",
        "value": "<mcp-env-var>AUTHORIZATION</mcp-env-var>",
        "in": "header",
        "envVarName": "AUTHORIZATION",
        "schemeType": "apiKey",
        "schemeName": "Authorization"
    }
];
export const inputParams = z.object({ "header": z.object({ "x-apideck-consumer-id": z.string().describe("ID of the consumer which you want to get or push data from"), "x-apideck-app-id": z.string().describe("The ID of your Unify application") }).optional(), "path": z.object({ "service_id": z.string().describe("Service ID of the resource to return"), "unified_api": z.string().describe("Unified API") }).optional(), "body": z.object({ "auth_type": z.enum(["oauth2", "apiKey", "basic", "custom", "none"]).describe("Type of authorization used by the connector").readonly().optional(), "authorize_url": z.string().nullable().describe("The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.").readonly().optional(), "configurable_resources": z.array(z.string()).readonly().optional(), "configuration": z.array(z.object({ "defaults": z.array(z.object({ "id": z.string().optional(), "options": z.array(z.union([z.object({ "label": z.string().optional(), "value": z.union([z.string(), z.number().int(), z.number(), z.boolean(), z.array(z.union([z.string(), z.number().int(), z.number()]))]).optional() }), z.object({ "id": z.string().optional(), "label": z.string().optional(), "options": z.array(z.object({ "label": z.string().optional(), "value": z.union([z.string(), z.number().int(), z.number(), z.boolean(), z.array(z.union([z.string(), z.number().int(), z.number()]))]).optional() })).optional() })])).optional(), "target": z.enum(["custom_fields", "resource"]).readonly().optional(), "value": z.union([z.string(), z.number().int(), z.number(), z.boolean(), z.array(z.union([z.string(), z.number().int(), z.number()]))]).optional() })).optional(), "resource": z.string().optional() })).optional(), "created_at": z.number().readonly().optional(), "enabled": z.boolean().describe("Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.").optional(), "form_fields": z.array(z.object({ "allow_custom_values": z.boolean().describe("Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list."), "custom_field": z.boolean().optional(), "description": z.string().nullable().describe("The description of the form field").optional(), "disabled": z.boolean().nullable().describe("Indicates if the form field is displayed in a “read-only” mode.").optional(), "hidden": z.boolean().nullable().describe("Indicates if the form field is not displayed but the value that is being stored on the connection.").optional(), "id": z.string().describe("The unique identifier of the form field.").optional(), "label": z.string().describe("The label of the field").optional(), "options": z.array(z.union([z.object({ "label": z.string().optional(), "value": z.union([z.string(), z.number().int(), z.number(), z.boolean(), z.array(z.union([z.string(), z.number().int(), z.number()]))]).optional() }), z.object({ "id": z.string().optional(), "label": z.string().optional(), "options": z.array(z.object({ "label": z.string().optional(), "value": z.union([z.string(), z.number().int(), z.number(), z.boolean(), z.array(z.union([z.string(), z.number().int(), z.number()]))]).optional() })).optional() })])).optional(), "placeholder": z.string().nullable().describe("The placeholder for the form field").optional(), "prefix": z.string().nullable().describe("Prefix to display in front of the form field.").optional(), "required": z.boolean().describe("Indicates if the form field is required, which means it must be filled in before the form can be submitted").optional(), "sensitive": z.boolean().nullable().describe("Indicates if the form field contains sensitive data, which will display the value as a masked input.").optional(), "suffix": z.string().nullable().describe("Suffix to display next to the form field.").optional(), "type": z.enum(["text", "checkbox", "tel", "email", "url", "textarea", "select", "filtered-select", "multi-select", "datetime", "date", "time", "number"]).optional() })).describe("The settings that are wanted to create a connection.").readonly().optional(), "has_guide": z.boolean().describe("Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).").readonly().optional(), "icon": z.string().describe("A visual icon of the connection, that will be shown in the Vault").readonly().optional(), "id": z.string().describe("The unique identifier of the connection.").readonly().optional(), "integration_state": z.enum(["disabled", "needs_configuration", "configured"]).describe("The current state of the Integration.").readonly().optional(), "logo": z.string().describe("The logo of the connection, that will be shown in the Vault").readonly().optional(), "metadata": z.object({}).catchall(z.any()).nullable().describe("Attach your own consumer specific metadata").optional(), "name": z.string().describe("The name of the connection").readonly().optional(), "oauth_grant_type": z.enum(["authorization_code", "client_credentials", "password"]).describe("OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types").readonly().optional(), "resource_schema_support": z.array(z.string()).readonly().optional(), "resource_settings_support": z.array(z.string()).readonly().optional(), "revoke_url": z.string().nullable().describe("The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.").readonly().optional(), "service_id": z.string().describe("The ID of the service this connection belongs to.").readonly().optional(), "settings": z.object({}).catchall(z.any()).nullable().describe("Connection settings. Values will persist to `form_fields` with corresponding id").optional(), "settings_required_for_authorization": z.array(z.string()).describe("List of settings that are required to be configured on integration before authorization can occur").readonly().optional(), "state": z.enum(["available", "callable", "added", "authorized", "invalid"]).describe("[Connection state flow](#section/Connection-state)").readonly().optional(), "status": z.enum(["live", "upcoming", "requested"]).describe("Status of the connection.").readonly().optional(), "subscriptions": z.array(z.object({ "created_at": z.string().describe("The date and time the webhook subscription was created downstream").optional(), "downstream_event_types": z.array(z.string().describe("The Downstream Event Type")).describe("The list of downstream Events this connection is subscribed to").optional(), "downstream_id": z.string().describe("The ID of the downstream service").optional(), "execute_url": z.string().describe("The URL the downstream is sending to when the event is triggered").optional(), "unify_event_types": z.array(z.string().describe("The Unify Event Type")).describe("The list of Unify Events this connection is subscribed to").optional() }).strict().readonly()).readonly().optional(), "tag_line": z.string().readonly().optional(), "unified_api": z.string().describe("The unified API category where the connection belongs to.").readonly().optional(), "updated_at": z.number().nullable().readonly().optional(), "validation_support": z.boolean().readonly().optional(), "website": z.string().describe("The website URL of the connection").readonly().optional() }).optional() }).shape;
